//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var TalkService_ttypes = require('./TalkService_types');


var ttypes = module.exports = {};
ttypes.LoginResultType = {
  'SUCCESS' : 1,
  'REQUIRE_QRCODE' : 2,
  'REQUIRE_DEVICE_CONFIRM' : 3,
  'REQUIRE_SMS_CONFIRM' : 4
};
ttypes.LoginType = {
  'ID_CREDENTIAL' : 0,
  'QRCODE' : 1,
  'ID_CREDENTIAL_WITH_E2EE' : 2
};
ttypes.IdentityCredentialResponseType = {
  'UNKNOWN' : 0,
  'SUCCESS' : 1,
  'REQUIRE_SERVER_SIDE_EMAIL' : 2,
  'REQUIRE_CLIENT_SIDE_EMAIL' : 3
};
ttypes.EncryptionKeyVersion = {
  'UNKNOWN' : 0,
  'V1' : 1
};
var TokenIssueResult = module.exports.TokenIssueResult = function(args) {
  this.accessToken = null;
  this.refreshToken = null;
  this.appId = null;
  if (args) {
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    }
    if (args.refreshToken !== undefined && args.refreshToken !== null) {
      this.refreshToken = args.refreshToken;
    }
    if (args.appId !== undefined && args.appId !== null) {
      this.appId = args.appId;
    }
  }
};
TokenIssueResult.prototype = {};
TokenIssueResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.refreshToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenIssueResult.prototype.write = function(output) {
  output.writeStructBegin('TokenIssueResult');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.refreshToken !== null && this.refreshToken !== undefined) {
    output.writeFieldBegin('refreshToken', Thrift.Type.STRING, 2);
    output.writeString(this.refreshToken);
    output.writeFieldEnd();
  }
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 3);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginResult = module.exports.LoginResult = function(args) {
  this.authToken = null;
  this.certificate = null;
  this.verifier = null;
  this.pinCode = null;
  this.type = null;
  this.lastPrimaryBindTime = null;
  this.displayMessage = null;
  this.sessionForSMSConfirm = null;
  this.tokenIssueResult = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.lastPrimaryBindTime !== undefined && args.lastPrimaryBindTime !== null) {
      this.lastPrimaryBindTime = args.lastPrimaryBindTime;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.sessionForSMSConfirm !== undefined && args.sessionForSMSConfirm !== null) {
      this.sessionForSMSConfirm = new TalkService_ttypes.VerificationSessionData(args.sessionForSMSConfirm);
    }
    if (args.tokenIssueResult !== undefined && args.tokenIssueResult !== null) {
      this.tokenIssueResult = new ttypes.TokenIssueResult(args.tokenIssueResult);
    }
  }
};
LoginResult.prototype = {};
LoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lastPrimaryBindTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionForSMSConfirm = new TalkService_ttypes.VerificationSessionData();
        this.sessionForSMSConfirm.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenIssueResult = new ttypes.TokenIssueResult();
        this.tokenIssueResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResult.prototype.write = function(output) {
  output.writeStructBegin('LoginResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 2);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 4);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.lastPrimaryBindTime !== null && this.lastPrimaryBindTime !== undefined) {
    output.writeFieldBegin('lastPrimaryBindTime', Thrift.Type.I64, 6);
    output.writeI64(this.lastPrimaryBindTime);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 7);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.sessionForSMSConfirm !== null && this.sessionForSMSConfirm !== undefined) {
    output.writeFieldBegin('sessionForSMSConfirm', Thrift.Type.STRUCT, 8);
    this.sessionForSMSConfirm.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenIssueResult !== null && this.tokenIssueResult !== undefined) {
    output.writeFieldBegin('tokenIssueResult', Thrift.Type.STRUCT, 9);
    this.tokenIssueResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginRequest = module.exports.LoginRequest = function(args) {
  this.e2eeVersion = null;
  this.type = null;
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  this.verifier = null;
  this.secret = null;
  if (args) {
    if (args.e2eeVersion !== undefined && args.e2eeVersion !== null) {
      this.e2eeVersion = args.e2eeVersion;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
  }
};
LoginRequest.prototype = {};
LoginRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.e2eeVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginRequest.prototype.write = function(output) {
  output.writeStructBegin('LoginRequest');
  if (this.e2eeVersion !== null && this.e2eeVersion !== undefined) {
    output.writeFieldBegin('e2eeVersion', Thrift.Type.I32, 11);
    output.writeI32(this.e2eeVersion);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 2);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 8);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 9);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 10);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthSessionRequest = module.exports.AuthSessionRequest = function(args) {
  this.metaData = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
  }
};
AuthSessionRequest.prototype = {};
AuthSessionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.metaData = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = input.readString();
          this.metaData[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthSessionRequest.prototype.write = function(output) {
  output.writeStructBegin('AuthSessionRequest');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter5 in this.metaData) {
      if (this.metaData.hasOwnProperty(kiter5)) {
        var viter6 = this.metaData[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentityCredentialResponse = module.exports.IdentityCredentialResponse = function(args) {
  this.metaData = null;
  this.responseType = null;
  this.confirmationVerifier = null;
  this.timeoutInSeconds = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
    if (args.responseType !== undefined && args.responseType !== null) {
      this.responseType = args.responseType;
    }
    if (args.confirmationVerifier !== undefined && args.confirmationVerifier !== null) {
      this.confirmationVerifier = args.confirmationVerifier;
    }
    if (args.timeoutInSeconds !== undefined && args.timeoutInSeconds !== null) {
      this.timeoutInSeconds = args.timeoutInSeconds;
    }
  }
};
IdentityCredentialResponse.prototype = {};
IdentityCredentialResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.metaData = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var key10 = null;
          var val11 = null;
          key10 = input.readString();
          val11 = input.readString();
          this.metaData[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.responseType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.confirmationVerifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timeoutInSeconds = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredentialResponse.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredentialResponse');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter12 in this.metaData) {
      if (this.metaData.hasOwnProperty(kiter12)) {
        var viter13 = this.metaData[kiter12];
        output.writeString(kiter12);
        output.writeString(viter13);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.responseType !== null && this.responseType !== undefined) {
    output.writeFieldBegin('responseType', Thrift.Type.I32, 2);
    output.writeI32(this.responseType);
    output.writeFieldEnd();
  }
  if (this.confirmationVerifier !== null && this.confirmationVerifier !== undefined) {
    output.writeFieldBegin('confirmationVerifier', Thrift.Type.STRING, 3);
    output.writeString(this.confirmationVerifier);
    output.writeFieldEnd();
  }
  if (this.timeoutInSeconds !== null && this.timeoutInSeconds !== undefined) {
    output.writeFieldBegin('timeoutInSeconds', Thrift.Type.I64, 4);
    output.writeI64(this.timeoutInSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentifierConfirmationRequest = module.exports.IdentifierConfirmationRequest = function(args) {
  this.metaData = null;
  this.forceRegistration = null;
  this.verificationCode = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
    if (args.forceRegistration !== undefined && args.forceRegistration !== null) {
      this.forceRegistration = args.forceRegistration;
    }
    if (args.verificationCode !== undefined && args.verificationCode !== null) {
      this.verificationCode = args.verificationCode;
    }
  }
};
IdentifierConfirmationRequest.prototype = {};
IdentifierConfirmationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.metaData = {};
        var _rtmp315 = input.readMapBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var key17 = null;
          var val18 = null;
          key17 = input.readString();
          val18 = input.readString();
          this.metaData[key17] = val18;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forceRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verificationCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentifierConfirmationRequest.prototype.write = function(output) {
  output.writeStructBegin('IdentifierConfirmationRequest');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter19 in this.metaData) {
      if (this.metaData.hasOwnProperty(kiter19)) {
        var viter20 = this.metaData[kiter19];
        output.writeString(kiter19);
        output.writeString(viter20);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.forceRegistration !== null && this.forceRegistration !== undefined) {
    output.writeFieldBegin('forceRegistration', Thrift.Type.BOOL, 2);
    output.writeBool(this.forceRegistration);
    output.writeFieldEnd();
  }
  if (this.verificationCode !== null && this.verificationCode !== undefined) {
    output.writeFieldBegin('verificationCode', Thrift.Type.STRING, 3);
    output.writeString(this.verificationCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentityCredentialRequest = module.exports.IdentityCredentialRequest = function(args) {
  this.metaData = null;
  this.identityProvider = null;
  this.cipherKeyId = null;
  this.cipherText = null;
  this.confirmationRequest = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.cipherKeyId !== undefined && args.cipherKeyId !== null) {
      this.cipherKeyId = args.cipherKeyId;
    }
    if (args.cipherText !== undefined && args.cipherText !== null) {
      this.cipherText = args.cipherText;
    }
    if (args.confirmationRequest !== undefined && args.confirmationRequest !== null) {
      this.confirmationRequest = new ttypes.IdentifierConfirmationRequest(args.confirmationRequest);
    }
  }
};
IdentityCredentialRequest.prototype = {};
IdentityCredentialRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.metaData = {};
        var _rtmp322 = input.readMapBegin();
        var _size21 = _rtmp322.size || 0;
        for (var _i23 = 0; _i23 < _size21; ++_i23) {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = input.readString();
          this.metaData[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cipherKeyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cipherText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.confirmationRequest = new ttypes.IdentifierConfirmationRequest();
        this.confirmationRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredentialRequest.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredentialRequest');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter26 in this.metaData) {
      if (this.metaData.hasOwnProperty(kiter26)) {
        var viter27 = this.metaData[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 2);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.cipherKeyId !== null && this.cipherKeyId !== undefined) {
    output.writeFieldBegin('cipherKeyId', Thrift.Type.STRING, 3);
    output.writeString(this.cipherKeyId);
    output.writeFieldEnd();
  }
  if (this.cipherText !== null && this.cipherText !== undefined) {
    output.writeFieldBegin('cipherText', Thrift.Type.STRING, 4);
    output.writeString(this.cipherText);
    output.writeFieldEnd();
  }
  if (this.confirmationRequest !== null && this.confirmationRequest !== undefined) {
    output.writeFieldBegin('confirmationRequest', Thrift.Type.STRUCT, 5);
    this.confirmationRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecurityCenterResult = module.exports.SecurityCenterResult = function(args) {
  this.uri = null;
  this.token = null;
  this.cookiePath = null;
  this.skip = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cookiePath !== undefined && args.cookiePath !== null) {
      this.cookiePath = args.cookiePath;
    }
    if (args.skip !== undefined && args.skip !== null) {
      this.skip = args.skip;
    }
  }
};
SecurityCenterResult.prototype = {};
SecurityCenterResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cookiePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.skip = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityCenterResult.prototype.write = function(output) {
  output.writeStructBegin('SecurityCenterResult');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cookiePath !== null && this.cookiePath !== undefined) {
    output.writeFieldBegin('cookiePath', Thrift.Type.STRING, 3);
    output.writeString(this.cookiePath);
    output.writeFieldEnd();
  }
  if (this.skip !== null && this.skip !== undefined) {
    output.writeFieldBegin('skip', Thrift.Type.BOOL, 4);
    output.writeBool(this.skip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetPasswordResponse = module.exports.SetPasswordResponse = function(args) {
};
SetPasswordResponse.prototype = {};
SetPasswordResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetPasswordResponse.prototype.write = function(output) {
  output.writeStructBegin('SetPasswordResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EncryptedPassword = module.exports.EncryptedPassword = function(args) {
  this.encryptionKeyVersion = null;
  this.cipherText = null;
  if (args) {
    if (args.encryptionKeyVersion !== undefined && args.encryptionKeyVersion !== null) {
      this.encryptionKeyVersion = args.encryptionKeyVersion;
    }
    if (args.cipherText !== undefined && args.cipherText !== null) {
      this.cipherText = args.cipherText;
    }
  }
};
EncryptedPassword.prototype = {};
EncryptedPassword.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.encryptionKeyVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cipherText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EncryptedPassword.prototype.write = function(output) {
  output.writeStructBegin('EncryptedPassword');
  if (this.encryptionKeyVersion !== null && this.encryptionKeyVersion !== undefined) {
    output.writeFieldBegin('encryptionKeyVersion', Thrift.Type.I32, 1);
    output.writeI32(this.encryptionKeyVersion);
    output.writeFieldEnd();
  }
  if (this.cipherText !== null && this.cipherText !== undefined) {
    output.writeFieldBegin('cipherText', Thrift.Type.STRING, 2);
    output.writeString(this.cipherText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

