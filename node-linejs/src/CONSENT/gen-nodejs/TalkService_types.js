//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.ErrorCode = {
  'ILLEGAL_ARGUMENT' : 0,
  'AUTHENTICATION_FAILED' : 1,
  'DB_FAILED' : 2,
  'INVALID_STATE' : 3,
  'EXCESSIVE_ACCESS' : 4,
  'NOT_FOUND' : 5,
  'INVALID_MID' : 9,
  'NOT_A_MEMBER' : 10,
  'INVALID_LENGTH' : 6,
  'NOT_AVAILABLE_USER' : 7,
  'NOT_AUTHORIZED_DEVICE' : 8,
  'NOT_AUTHORIZED_SESSION' : 14,
  'INCOMPATIBLE_APP_VERSION' : 11,
  'NOT_READY' : 12,
  'NOT_AVAILABLE_SESSION' : 13,
  'SYSTEM_ERROR' : 15,
  'NO_AVAILABLE_VERIFICATION_METHOD' : 16,
  'NOT_AUTHENTICATED' : 17,
  'INVALID_IDENTITY_CREDENTIAL' : 18,
  'NOT_AVAILABLE_IDENTITY_IDENTIFIER' : 19,
  'INTERNAL_ERROR' : 20,
  'NO_SUCH_IDENTITY_IDENFIER' : 21,
  'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY' : 22,
  'ILLEGAL_IDENTITY_CREDENTIAL' : 23,
  'UNKNOWN_CHANNEL' : 24,
  'NO_SUCH_MESSAGE_BOX' : 25,
  'NOT_AVAILABLE_MESSAGE_BOX' : 26,
  'CHANNEL_DOES_NOT_MATCH' : 27,
  'NOT_YOUR_MESSAGE' : 28,
  'MESSAGE_DEFINED_ERROR' : 29,
  'USER_CANNOT_ACCEPT_PRESENTS' : 30,
  'USER_NOT_STICKER_OWNER' : 32,
  'MAINTENANCE_ERROR' : 33,
  'ACCOUNT_NOT_MATCHED' : 34,
  'ABUSE_BLOCK' : 35,
  'NOT_FRIEND' : 36,
  'NOT_ALLOWED_CALL' : 37,
  'BLOCK_FRIEND' : 38,
  'INCOMPATIBLE_VOIP_VERSION' : 39,
  'INVALID_SNS_ACCESS_TOKEN' : 40,
  'EXTERNAL_SERVICE_NOT_AVAILABLE' : 41,
  'NOT_ALLOWED_ADD_CONTACT' : 42,
  'NOT_CERTIFICATED' : 43,
  'NOT_ALLOWED_SECONDARY_DEVICE' : 44,
  'INVALID_PIN_CODE' : 45,
  'NOT_FOUND_IDENTITY_CREDENTIAL' : 46,
  'EXCEED_FILE_MAX_SIZE' : 47,
  'EXCEED_DAILY_QUOTA' : 48,
  'NOT_SUPPORT_SEND_FILE' : 49,
  'MUST_UPGRADE' : 50,
  'NOT_AVAILABLE_PIN_CODE_SESSION' : 51,
  'EXPIRED_REVISION' : 52,
  'NOT_YET_PHONE_NUMBER' : 54,
  'BAD_CALL_NUMBER' : 55,
  'UNAVAILABLE_CALL_NUMBER' : 56,
  'NOT_SUPPORT_CALL_SERVICE' : 57,
  'CONGESTION_CONTROL' : 58,
  'NO_BALANCE' : 59,
  'NOT_PERMITTED_CALLER_ID' : 60,
  'NO_CALLER_ID_LIMIT_EXCEEDED' : 61,
  'CALLER_ID_VERIFICATION_REQUIRED' : 62,
  'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 63,
  'MESSAGE_NOT_FOUND' : 64,
  'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT' : 65,
  'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED' : 66,
  'ACCOUNT_MIGRATION_PINCODE_BLOCKED' : 67,
  'INVALID_PASSWORD_FORMAT' : 69,
  'FEATURE_RESTRICTED' : 70,
  'MESSAGE_NOT_DESTRUCTIBLE' : 71,
  'PAID_CALL_REDEEM_FAILED' : 72,
  'PREVENTED_JOIN_BY_TICKET' : 73,
  'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT' : 75,
  'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY' : 76,
  'SECURITY_CENTER_NOT_VERIFIED' : 77,
  'SECURITY_CENTER_BLOCKED_BY_SETTING' : 78,
  'SECURITY_CENTER_BLOCKED' : 79,
  'TALK_PROXY_EXCEPTION' : 80,
  'E2EE_INVALID_PROTOCOL' : 81,
  'E2EE_RETRY_ENCRYPT' : 82,
  'E2EE_UPDATE_SENDER_KEY' : 83,
  'E2EE_UPDATE_RECEIVER_KEY' : 84,
  'E2EE_INVALID_ARGUMENT' : 85,
  'E2EE_INVALID_VERSION' : 86,
  'E2EE_SENDER_DISABLED' : 87,
  'E2EE_RECEIVER_DISABLED' : 88,
  'E2EE_SENDER_NOT_ALLOWED' : 89,
  'E2EE_RECEIVER_NOT_ALLOWED' : 90,
  'E2EE_RESEND_FAIL' : 91,
  'E2EE_RESEND_OK' : 92,
  'HITOKOTO_BACKUP_NO_AVAILABLE_DATA' : 93,
  'E2EE_UPDATE_PRIMARY_DEVICE' : 94,
  'SUCCESS' : 95,
  'CANCEL' : 96,
  'E2EE_PRIMARY_NOT_SUPPORT' : 97,
  'E2EE_RETRY_PLAIN' : 98,
  'E2EE_RECREATE_GROUP_KEY' : 99,
  'E2EE_GROUP_TOO_MANY_MEMBERS' : 100,
  'SERVER_BUSY' : 101,
  'NOT_ALLOWED_ADD_FOLLOW' : 102,
  'INCOMING_FRIEND_REQUEST_LIMIT' : 103,
  'OUTGOING_FRIEND_REQUEST_LIMIT' : 104,
  'OUTGOING_FRIEND_REQUEST_QUOTA' : 105,
  'DUPLICATED' : 106,
  'BANNED' : 107,
  'NOT_AN_INVITEE' : 108,
  'NOT_AN_OUTSIDER' : 109,
  'EMPTY_GROUP' : 111,
  'EXCEED_FOLLOW_LIMIT' : 112,
  'UNSUPPORTED_ACCOUNT_TYPE' : 113
};
ttypes.ProfileAttribute = {
  'ALL' : 511,
  'EMAIL' : 1,
  'DISPLAY_NAME' : 2,
  'PHONETIC_NAME' : 4,
  'PICTURE' : 8,
  'STATUS_MESSAGE' : 16,
  'ALLOW_SEARCH_BY_USERID' : 32,
  'ALLOW_SEARCH_BY_EMAIL' : 64,
  'BUDDY_STATUS' : 128,
  'MUSIC_PROFILE' : 256,
  'AVATAR_PROFILE' : 512
};
ttypes.SettingsAttributeEx = {
  'NOTIFICATION_ENABLE' : 0,
  'NOTIFICATION_MUTE_EXPIRATION' : 1,
  'NOTIFICATION_NEW_MESSAGE' : 2,
  'NOTIFICATION_GROUP_INVITATION' : 3,
  'NOTIFICATION_SHOW_MESSAGE' : 4,
  'NOTIFICATION_INCOMING_CALL' : 5,
  'NOTIFICATION_SOUND_MESSAGE' : 8,
  'NOTIFICATION_SOUND_GROUP' : 9,
  'NOTIFICATION_DISABLED_WITH_SUB' : 16,
  'NOTIFICATION_PAYMENT' : 17,
  'NOTIFICATION_MENTION' : 40,
  'NOTIFICATION_THUMBNAIL' : 45,
  'PRIVACY_SYNC_CONTACTS' : 6,
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 7,
  'PRIVACY_SEARCH_BY_USERID' : 13,
  'PRIVACY_SEARCH_BY_EMAIL' : 14,
  'PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS' : 51,
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 21,
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 23,
  'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME' : 35,
  'PRIVACY_PROFILE_HISTORY' : 57,
  'PRIVACY_STATUS_MESSAGE_HISTORY' : 54,
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 30,
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 25,
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 26,
  'PRIVACY_AGREE_USE_PAIDCALL' : 27,
  'PRIVACY_AGE_RESULT' : 60,
  'PRIVACY_AGE_RESULT_RECEIVED' : 61,
  'PRIVACY_ALLOW_FOLLOW' : 63,
  'PRIVACY_SHOW_FOLLOW_LIST' : 64,
  'CONTACT_MY_TICKET' : 10,
  'IDENTITY_PROVIDER' : 11,
  'IDENTITY_IDENTIFIER' : 12,
  'SNS_ACCOUNT' : 19,
  'PHONE_REGISTRATION' : 20,
  'PREFERENCE_LOCALE' : 15,
  'CUSTOM_MODE' : 22,
  'EMAIL_CONFIRMATION_STATUS' : 24,
  'ACCOUNT_MIGRATION_PINCODE' : 28,
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 29,
  'SECURITY_CENTER_SETTINGS' : 18,
  'E2EE_ENABLE' : 33,
  'HITOKOTO_BACKUP_REQUESTED' : 34,
  'CONTACT_ALLOW_FOLLOWING' : 36,
  'PRIVACY_ALLOW_NEARBY' : 37,
  'AGREEMENT_NEARBY' : 38,
  'AGREEMENT_SQUARE' : 39,
  'ALLOW_UNREGISTRATION_SECONDARY_DEVICE' : 41,
  'AGREEMENT_BOT_USE' : 42,
  'AGREEMENT_SHAKE_FUNCTION' : 43,
  'AGREEMENT_MOBILE_CONTACT_NAME' : 44,
  'AGREEMENT_SOUND_TO_TEXT' : 46,
  'AGREEMENT_PRIVACY_POLICY_VERSION' : 47,
  'AGREEMENT_AD_BY_WEB_ACCESS' : 48,
  'AGREEMENT_PHONE_NUMBER_MATCHING' : 49,
  'AGREEMENT_COMMUNICATION_INFO' : 50,
  'AGREEMENT_THINGS_WIRELESS_COMMUNICATION' : 52,
  'AGREEMENT_GDPR' : 53,
  'AGREEMENT_PROVIDE_LOCATION' : 55,
  'AGREEMENT_BEACON' : 56,
  'AGREEMENT_CONTENTS_SUGGEST' : 58,
  'AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION' : 59,
  'AGREEMENT_OCR_IMAGE_COLLECTION' : 62
};
ttypes.SyncReason = {
  'UNSPECIFIED' : 0,
  'UNKNOWN' : 1,
  'INITIALIZATION' : 2,
  'OPERATION' : 3,
  'FULL_SYNC' : 4,
  'AUTO_REPAIR' : 5,
  'MANUAL_REPAIR' : 6,
  'INTERNAL' : 7
};
ttypes.ContactType = {
  'MID' : 0,
  'PHONE' : 1,
  'EMAIL' : 2,
  'USERID' : 3,
  'PROXIMITY' : 4,
  'GROUP' : 5,
  'USER' : 6,
  'QRCODE' : 7,
  'PROMOTION_BOT' : 8,
  'CONTACT_MESSAGE' : 9,
  'FRIEND_REQUEST' : 10,
  'REPAIR' : 128,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308,
  'BBM' : 2309,
  'BEACON' : 11
};
ttypes.ContactStatus = {
  'UNSPECIFIED' : 0,
  'FRIEND' : 1,
  'FRIEND_BLOCKED' : 2,
  'RECOMMEND' : 3,
  'RECOMMEND_BLOCKED' : 4,
  'DELETED' : 5,
  'DELETED_BLOCKED' : 6
};
ttypes.ContactRelation = {
  'ONEWAY' : 0,
  'BOTH' : 1,
  'NOT_REGISTERED' : 2
};
ttypes.FriendRequestStatus = {
  'NONE' : 0,
  'AVAILABLE' : 1,
  'ALREADY_REQUESTED' : 2,
  'UNAVAILABLE' : 3
};
ttypes.OpType = {
  'END_OF_OPERATION' : 0,
  'UPDATE_PROFILE' : 1,
  'UPDATE_SETTINGS' : 36,
  'NOTIFIED_UPDATE_PROFILE' : 2,
  'REGISTER_USERID' : 3,
  'ADD_CONTACT' : 4,
  'NOTIFIED_ADD_CONTACT' : 5,
  'BLOCK_CONTACT' : 6,
  'UNBLOCK_CONTACT' : 7,
  'NOTIFIED_RECOMMEND_CONTACT' : 8,
  'CREATE_GROUP' : 9,
  'UPDATE_GROUP' : 10,
  'NOTIFIED_UPDATE_GROUP' : 11,
  'INVITE_INTO_GROUP' : 12,
  'NOTIFIED_INVITE_INTO_GROUP' : 13,
  'CANCEL_INVITATION_GROUP' : 31,
  'NOTIFIED_CANCEL_INVITATION_GROUP' : 32,
  'LEAVE_GROUP' : 14,
  'NOTIFIED_LEAVE_GROUP' : 15,
  'ACCEPT_GROUP_INVITATION' : 16,
  'NOTIFIED_ACCEPT_GROUP_INVITATION' : 17,
  'REJECT_GROUP_INVITATION' : 34,
  'NOTIFIED_REJECT_GROUP_INVITATION' : 35,
  'KICKOUT_FROM_GROUP' : 18,
  'NOTIFIED_KICKOUT_FROM_GROUP' : 19,
  'CREATE_ROOM' : 20,
  'INVITE_INTO_ROOM' : 21,
  'NOTIFIED_INVITE_INTO_ROOM' : 22,
  'LEAVE_ROOM' : 23,
  'NOTIFIED_LEAVE_ROOM' : 24,
  'SEND_MESSAGE' : 25,
  'RECEIVE_MESSAGE' : 26,
  'SEND_MESSAGE_RECEIPT' : 27,
  'RECEIVE_MESSAGE_RECEIPT' : 28,
  'SEND_CONTENT_RECEIPT' : 29,
  'SEND_CHAT_CHECKED' : 40,
  'SEND_CHAT_REMOVED' : 41,
  'RECEIVE_ANNOUNCEMENT' : 30,
  'INVITE_VIA_EMAIL' : 38,
  'NOTIFIED_REGISTER_USER' : 37,
  'NOTIFIED_UNREGISTER_USER' : 33,
  'NOTIFIED_REQUEST_RECOVERY' : 39,
  'NOTIFIED_FORCE_SYNC' : 42,
  'SEND_CONTENT' : 43,
  'SEND_MESSAGE_MYHOME' : 44,
  'NOTIFIED_UPDATE_CONTENT_PREVIEW' : 45,
  'REMOVE_ALL_MESSAGES' : 46,
  'NOTIFIED_UPDATE_PURCHASES' : 47,
  'DUMMY' : 48,
  'UPDATE_CONTACT' : 49,
  'NOTIFIED_RECEIVED_CALL' : 50,
  'CANCEL_CALL' : 51,
  'NOTIFIED_REDIRECT' : 52,
  'NOTIFIED_CHANNEL_SYNC' : 53,
  'FAILED_SEND_MESSAGE' : 54,
  'NOTIFIED_READ_MESSAGE' : 55,
  'FAILED_EMAIL_CONFIRMATION' : 56,
  'NOTIFIED_PUSH_NOTICENTER_ITEM' : 59,
  'NOTIFIED_CHAT_CONTENT' : 58,
  'NOTIFIED_JOIN_CHAT' : 60,
  'NOTIFIED_LEAVE_CHAT' : 61,
  'NOTIFIED_TYPING' : 62,
  'FRIEND_REQUEST_ACCEPTED' : 63,
  'DESTROY_MESSAGE' : 64,
  'NOTIFIED_DESTROY_MESSAGE' : 65,
  'UPDATE_PUBLICKEYCHAIN' : 66,
  'NOTIFIED_UPDATE_PUBLICKEYCHAIN' : 67,
  'NOTIFIED_BLOCK_CONTACT' : 68,
  'NOTIFIED_UNBLOCK_CONTACT' : 69,
  'UPDATE_GROUPPREFERENCE' : 70,
  'NOTIFIED_PAYMENT_EVENT' : 71,
  'REGISTER_E2EE_PUBLICKEY' : 72,
  'NOTIFIED_E2EE_KEY_EXCHANGE_REQ' : 73,
  'NOTIFIED_E2EE_KEY_EXCHANGE_RESP' : 74,
  'NOTIFIED_E2EE_MESSAGE_RESEND_REQ' : 75,
  'NOTIFIED_E2EE_MESSAGE_RESEND_RESP' : 76,
  'NOTIFIED_E2EE_KEY_UPDATE' : 77,
  'NOTIFIED_BUDDY_UPDATE_PROFILE' : 78,
  'NOTIFIED_UPDATE_LINEAT_TABS' : 79,
  'UPDATE_ROOM' : 80,
  'NOTIFIED_BEACON_DETECTED' : 81,
  'UPDATE_EXTENDED_PROFILE' : 82,
  'ADD_FOLLOW' : 83,
  'NOTIFIED_ADD_FOLLOW' : 84,
  'DELETE_FOLLOW' : 85,
  'NOTIFIED_DELETE_FOLLOW' : 86,
  'UPDATE_TIMELINE_SETTINGS' : 87,
  'NOTIFIED_FRIEND_REQUEST' : 88,
  'UPDATE_RINGBACK_TONE' : 89,
  'NOTIFIED_POSTBACK' : 90,
  'RECEIVE_READ_WATERMARK' : 91,
  'NOTIFIED_MESSAGE_DELIVERED' : 92,
  'NOTIFIED_UPDATE_CHAT_BAR' : 93,
  'NOTIFIED_CHATAPP_INSTALLED' : 94,
  'NOTIFIED_CHATAPP_UPDATED' : 95,
  'NOTIFIED_CHATAPP_NEW_MARK' : 96,
  'NOTIFIED_CHATAPP_DELETED' : 97,
  'NOTIFIED_CHATAPP_SYNC' : 98,
  'NOTIFIED_UPDATE_MESSAGE' : 99,
  'UPDATE_CHATROOMBGM' : 100,
  'NOTIFIED_UPDATE_CHATROOMBGM' : 101,
  'UPDATE_RINGTONE' : 102,
  'UPDATE_USER_SETTINGS' : 118,
  'NOTIFIED_UPDATE_STATUS_BAR' : 119,
  'CREATE_CHAT' : 120,
  'UPDATE_CHAT' : 121,
  'NOTIFIED_UPDATE_CHAT' : 122,
  'INVITE_INTO_CHAT' : 123,
  'NOTIFIED_INVITE_INTO_CHAT' : 124,
  'CANCEL_CHAT_INVITATION' : 125,
  'NOTIFIED_CANCEL_CHAT_INVITATION' : 126,
  'DELETE_SELF_FROM_CHAT' : 127,
  'NOTIFIED_DELETE_SELF_FROM_CHAT' : 128,
  'ACCEPT_CHAT_INVITATION' : 129,
  'NOTIFIED_ACCEPT_CHAT_INVITATION' : 130,
  'REJECT_CHAT_INVITATION' : 131,
  'DELETE_OTHER_FROM_CHAT' : 132,
  'NOTIFIED_DELETE_OTHER_FROM_CHAT' : 133
};
ttypes.OpStatus = {
  'NORMAL' : 0,
  'ALERT_DISABLED' : 1,
  'ALWAYS' : 2
};
ttypes.MIDType = {
  'USER' : 0,
  'ROOM' : 1,
  'GROUP' : 2,
  'SQUARE' : 3,
  'SQUARE_CHAT' : 4,
  'SQUARE_MEMBER' : 5,
  'BOT' : 6
};
ttypes.PlaceSearchProvider = {
  'GOOGLE' : 0,
  'BAIDU' : 1,
  'FOURSQUARE' : 2
};
ttypes.ContentType = {
  'NONE' : 0,
  'IMAGE' : 1,
  'VIDEO' : 2,
  'AUDIO' : 3,
  'HTML' : 4,
  'PDF' : 5,
  'CALL' : 6,
  'STICKER' : 7,
  'PRESENCE' : 8,
  'GIFT' : 9,
  'GROUPBOARD' : 10,
  'APPLINK' : 11,
  'LINK' : 12,
  'CONTACT' : 13,
  'FILE' : 14,
  'LOCATION' : 15,
  'POSTNOTIFICATION' : 16,
  'RICH' : 17,
  'CHATEVENT' : 18,
  'MUSIC' : 19,
  'PAYMENT' : 20,
  'EXTIMAGE' : 21,
  'FLEX' : 22
};
ttypes.MessageRelationType = {
  'FORWARD' : 0,
  'AUTO_REPLY' : 1,
  'SUBORDINATE' : 2,
  'REPLY' : 3
};
ttypes.ServiceCode = {
  'UNKNOWN' : 0,
  'TALK' : 1,
  'SQUARE' : 2
};
ttypes.AppExtensionType = {
  'SIRI' : 1,
  'GOOGLE_ASSISTANT' : 2,
  'OS_SHARE' : 3
};
ttypes.ChatAttribute = {
  'NAME' : 1,
  'PICTURE_STATUS' : 2,
  'PREVENTED_JOIN_BY_TICKET' : 4,
  'NOTIFICATION_SETTING' : 8,
  'INVITATION_TICKET' : 16,
  'FAVORITE_TIMESTAMP' : 32,
  'CHAT_TYPE' : 64
};
ttypes.ChatType = {
  'GROUP' : 0,
  'ROOM' : 1,
  'PEER' : 2
};
ttypes.IdentityProvider = {
  'UNKNOWN' : 0,
  'LINE' : 1,
  'NAVER_KR' : 2,
  'LINE_PHONE' : 3
};
ttypes.CountryGroup = {
  'UNKNOWN' : 0,
  'EUROPEAN_ECONOMIC_AREA' : 1
};
ttypes.VerificationMethod = {
  'NO_AVAILABLE' : 0,
  'PIN_VIA_SMS' : 1,
  'CALLERID_INDIGO' : 2,
  'PIN_VIA_TTS' : 4,
  'SKIP' : 10
};
ttypes.CarrierCode = {
  'NOT_SPECIFIED' : 0,
  'JP_DOCOMO' : 1,
  'JP_AU' : 2,
  'JP_SOFTBANK' : 3,
  'KR_SKT' : 17,
  'KR_KT' : 18,
  'KR_LGT' : 19,
  'JP_DOCOMO_LINE' : 4,
  'JP_SOFTBANK_LINE' : 5,
  'JP_AU_LINE' : 6
};
ttypes.ApplicationType = {
  'IOS' : 16,
  'IOS_RC' : 17,
  'IOS_BETA' : 18,
  'IOS_ALPHA' : 19,
  'ANDROID' : 32,
  'ANDROID_RC' : 33,
  'ANDROID_BETA' : 34,
  'ANDROID_ALPHA' : 35,
  'WAP' : 48,
  'WAP_RC' : 49,
  'WAP_BETA' : 50,
  'WAP_ALPHA' : 51,
  'BOT' : 64,
  'BOT_RC' : 65,
  'BOT_BETA' : 66,
  'BOT_ALPHA' : 67,
  'WEB' : 80,
  'WEB_RC' : 81,
  'WEB_BETA' : 82,
  'WEB_ALPHA' : 83,
  'DESKTOPWIN' : 96,
  'DESKTOPWIN_RC' : 97,
  'DESKTOPWIN_BETA' : 98,
  'DESKTOPWIN_ALPHA' : 99,
  'DESKTOPMAC' : 112,
  'DESKTOPMAC_RC' : 113,
  'DESKTOPMAC_BETA' : 114,
  'DESKTOPMAC_ALPHA' : 115,
  'CHANNELGW' : 128,
  'CHANNELGW_RC' : 129,
  'CHANNELGW_BETA' : 130,
  'CHANNELGW_ALPHA' : 131,
  'CHANNELCP' : 144,
  'CHANNELCP_RC' : 145,
  'CHANNELCP_BETA' : 146,
  'CHANNELCP_ALPHA' : 147,
  'WINPHONE' : 160,
  'WINPHONE_RC' : 161,
  'WINPHONE_BETA' : 162,
  'WINPHONE_ALPHA' : 163,
  'BLACKBERRY' : 176,
  'BLACKBERRY_RC' : 177,
  'BLACKBERRY_BETA' : 178,
  'BLACKBERRY_ALPHA' : 179,
  'WINMETRO' : 192,
  'WINMETRO_RC' : 193,
  'WINMETRO_BETA' : 194,
  'WINMETRO_ALPHA' : 195,
  'S40' : 208,
  'S40_RC' : 209,
  'S40_BETA' : 210,
  'S40_ALPHA' : 211,
  'CHRONO' : 224,
  'CHRONO_RC' : 225,
  'CHRONO_BETA' : 226,
  'CHRONO_ALPHA' : 227,
  'TIZEN' : 256,
  'TIZEN_RC' : 257,
  'TIZEN_BETA' : 258,
  'TIZEN_ALPHA' : 259,
  'VIRTUAL' : 272,
  'FIREFOXOS' : 288,
  'FIREFOXOS_RC' : 289,
  'FIREFOXOS_BETA' : 290,
  'FIREFOXOS_ALPHA' : 291,
  'IOSIPAD' : 304,
  'IOSIPAD_RC' : 305,
  'IOSIPAD_BETA' : 306,
  'IOSIPAD_ALPHA' : 307,
  'BIZIOS' : 320,
  'BIZIOS_RC' : 321,
  'BIZIOS_BETA' : 322,
  'BIZIOS_ALPHA' : 323,
  'BIZANDROID' : 336,
  'BIZANDROID_RC' : 337,
  'BIZANDROID_BETA' : 338,
  'BIZANDROID_ALPHA' : 339,
  'BIZBOT' : 352,
  'BIZBOT_RC' : 353,
  'BIZBOT_BETA' : 354,
  'BIZBOT_ALPHA' : 355,
  'CHROMEOS' : 368,
  'CHROMEOS_RC' : 369,
  'CHROMEOS_BETA' : 370,
  'CHROMEOS_ALPHA' : 371,
  'ANDROIDLITE' : 384,
  'ANDROIDLITE_RC' : 385,
  'ANDROIDLITE_BETA' : 386,
  'ANDROIDLITE_ALPHA' : 387,
  'WIN10' : 400,
  'WIN10_RC' : 401,
  'WIN10_BETA' : 402,
  'WIN10_ALPHA' : 403,
  'BIZWEB' : 416,
  'BIZWEB_RC' : 417,
  'BIZWEB_BETA' : 418,
  'BIZWEB_ALPHA' : 419,
  'DUMMYPRIMARY' : 432,
  'DUMMYPRIMARY_RC' : 433,
  'DUMMYPRIMARY_BETA' : 434,
  'DUMMYPRIMARY_ALPHA' : 435,
  'SQUARE' : 448,
  'SQUARE_RC' : 449,
  'SQUARE_BETA' : 450,
  'SQUARE_ALPHA' : 451,
  'INTERNAL' : 464,
  'INTERNAL_RC' : 465,
  'INTERNAL_BETA' : 466,
  'INTERNAL_ALPHA' : 467,
  'CLOVAFRIENDS' : 480,
  'CLOVAFRIENDS_RC' : 481,
  'CLOVAFRIENDS_BETA' : 482,
  'CLOVAFRIENDS_ALPHA' : 483,
  'WATCHOS' : 496,
  'WATCHOS_RC' : 497,
  'WATCHOS_BETA' : 498,
  'WATCHOS_ALPHA' : 499
};
ttypes.VerificationResult = {
  'FAILED' : 0,
  'OK_NOT_REGISTERED_YET' : 1,
  'OK_REGISTERED_WITH_SAME_DEVICE' : 2,
  'OK_REGISTERED_WITH_ANOTHER_DEVICE' : 3
};
ttypes.AccountMigrationCheckType = {
  'SKIP' : 0,
  'PINCODE' : 1,
  'SECURITY_CENTER' : 2
};
ttypes.ProfileHistoryPrivacyType = {
  'OWNER' : 0,
  'FRIEND' : 1
};
ttypes.StatusMessageHistoryPrivacyType = {
  'NONE' : 1,
  'ALL' : 2
};
ttypes.PrivacyShareMyProfileType = {
  'NEVER_SHOW' : 0,
  'ONE_WAY' : 1,
  'MUTUAL' : 2
};
ttypes.UserAgeType = {
  'OVER' : 1,
  'UNDER' : 2,
  'UNDEFINED' : 3
};
ttypes.SnsIdType = {
  'FACEBOOK' : 1,
  'SINA' : 2,
  'RENREN' : 3,
  'FEIXIN' : 4,
  'BBM' : 5,
  'APPLE' : 6
};
ttypes.EmailConfirmationStatus = {
  'NOT_SPECIFIED' : 0,
  'NOT_YET' : 1,
  'DONE' : 3,
  'NEED_ENFORCED_INPUT' : 4
};
ttypes.AccountMigrationPincodeType = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.SecurityCenterSettingsType = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.CustomMode = {
  'PROMOTION_FRIENDS_INVITE' : 1,
  'CAPABILITY_SERVER_SIDE_SMS' : 2,
  'LINE_CLIENT_ANALYTICS_CONFIGURATION' : 3
};
ttypes.ModificationType = {
  'ADD' : 0,
  'REMOVE' : 1,
  'MODIFY' : 2
};
ttypes.ContactSetting = {
  'CONTACT_SETTING_NOTIFICATION_DISABLE' : 1,
  'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE' : 2,
  'CONTACT_SETTING_CONTACT_HIDE' : 4,
  'CONTACT_SETTING_FAVORITE' : 8,
  'CONTACT_SETTING_DELETE' : 16
};
ttypes.NotificationType = {
  'APPLE_APNS' : 1,
  'GOOGLE_C2DM' : 2,
  'NHN_NNI' : 3,
  'SKT_AOM' : 4,
  'MS_MPNS' : 5,
  'RIM_BIS' : 6,
  'GOOGLE_GCM' : 7,
  'NOKIA_NNAPI' : 8,
  'TIZEN' : 9,
  'MOZILLA_SIMPLE' : 10,
  'LINE_BOT' : 17,
  'LINE_WAP' : 18,
  'APPLE_APNS_VOIP' : 19,
  'MS_WNS' : 20,
  'GOOGLE_FCM' : 21,
  'CLOVA' : 22,
  'CLOVA_VOIP' : 23,
  'HUAWEI_HCM' : 24
};
var TalkException = module.exports.TalkException = function(args) {
  Thrift.TException.call(this, "TalkException");
  this.name = "TalkException";
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(TalkException, Thrift.TException);
TalkException.prototype.name = 'TalkException';
TalkException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.parameterMap = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = input.readString();
          this.parameterMap[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkException.prototype.write = function(output) {
  output.writeStructBegin('TalkException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter5 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter5)) {
        var viter6 = this.parameterMap[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Ticket = module.exports.Ticket = function(args) {
  this.id = null;
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
Ticket.prototype = {};
Ticket.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ticket.prototype.write = function(output) {
  output.writeStructBegin('Ticket');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 10);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 21);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AvatarProfile = module.exports.AvatarProfile = function(args) {
  this.version = null;
  this.updatedMillis = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.updatedMillis !== undefined && args.updatedMillis !== null) {
      this.updatedMillis = args.updatedMillis;
    }
  }
};
AvatarProfile.prototype = {};
AvatarProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updatedMillis = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvatarProfile.prototype.write = function(output) {
  output.writeStructBegin('AvatarProfile');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.updatedMillis !== null && this.updatedMillis !== undefined) {
    output.writeFieldBegin('updatedMillis', Thrift.Type.I64, 2);
    output.writeI64(this.updatedMillis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Contact = module.exports.Contact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.type = null;
  this.status = null;
  this.relation = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.displayNameOverridden = null;
  this.favoriteTime = null;
  this.capableVoiceCall = null;
  this.capableVideoCall = null;
  this.capableMyhome = null;
  this.capableBuddy = null;
  this.attributes = null;
  this.settings = null;
  this.picturePath = null;
  this.recommendParams = null;
  this.friendRequestStatus = null;
  this.musicProfile = null;
  this.videoProfile = null;
  this.statusMessageContentMetadata = null;
  this.avatarProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = args.relation;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
    if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
      this.favoriteTime = args.favoriteTime;
    }
    if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
      this.capableVoiceCall = args.capableVoiceCall;
    }
    if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
      this.capableVideoCall = args.capableVideoCall;
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
    if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
      this.capableBuddy = args.capableBuddy;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = args.attributes;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.recommendParams !== undefined && args.recommendParams !== null) {
      this.recommendParams = args.recommendParams;
    }
    if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
      this.friendRequestStatus = args.friendRequestStatus;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
    if (args.statusMessageContentMetadata !== undefined && args.statusMessageContentMetadata !== null) {
      this.statusMessageContentMetadata = Thrift.copyMap(args.statusMessageContentMetadata, [null]);
    }
    if (args.avatarProfile !== undefined && args.avatarProfile !== null) {
      this.avatarProfile = new ttypes.AvatarProfile(args.avatarProfile);
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.relation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVoiceCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVideoCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.BOOL) {
        this.capableBuddy = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.attributes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.recommendParams = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.friendRequestStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.MAP) {
        this.statusMessageContentMetadata = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var key10 = null;
          var val11 = null;
          key10 = input.readString();
          val11 = input.readString();
          this.statusMessageContentMetadata[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarProfile = new ttypes.AvatarProfile();
        this.avatarProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 11);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.I32, 21);
    output.writeI32(this.relation);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 22);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 23);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 24);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 25);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 26);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 27);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  if (this.favoriteTime !== null && this.favoriteTime !== undefined) {
    output.writeFieldBegin('favoriteTime', Thrift.Type.I64, 28);
    output.writeI64(this.favoriteTime);
    output.writeFieldEnd();
  }
  if (this.capableVoiceCall !== null && this.capableVoiceCall !== undefined) {
    output.writeFieldBegin('capableVoiceCall', Thrift.Type.BOOL, 31);
    output.writeBool(this.capableVoiceCall);
    output.writeFieldEnd();
  }
  if (this.capableVideoCall !== null && this.capableVideoCall !== undefined) {
    output.writeFieldBegin('capableVideoCall', Thrift.Type.BOOL, 32);
    output.writeBool(this.capableVideoCall);
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 33);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  if (this.capableBuddy !== null && this.capableBuddy !== undefined) {
    output.writeFieldBegin('capableBuddy', Thrift.Type.BOOL, 34);
    output.writeBool(this.capableBuddy);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.I32, 35);
    output.writeI32(this.attributes);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 36);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 37);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.recommendParams !== null && this.recommendParams !== undefined) {
    output.writeFieldBegin('recommendParams', Thrift.Type.STRING, 38);
    output.writeString(this.recommendParams);
    output.writeFieldEnd();
  }
  if (this.friendRequestStatus !== null && this.friendRequestStatus !== undefined) {
    output.writeFieldBegin('friendRequestStatus', Thrift.Type.I32, 39);
    output.writeI32(this.friendRequestStatus);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 40);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 42);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  if (this.statusMessageContentMetadata !== null && this.statusMessageContentMetadata !== undefined) {
    output.writeFieldBegin('statusMessageContentMetadata', Thrift.Type.MAP, 43);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.statusMessageContentMetadata));
    for (var kiter12 in this.statusMessageContentMetadata) {
      if (this.statusMessageContentMetadata.hasOwnProperty(kiter12)) {
        var viter13 = this.statusMessageContentMetadata[kiter12];
        output.writeString(kiter12);
        output.writeString(viter13);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.avatarProfile !== null && this.avatarProfile !== undefined) {
    output.writeFieldBegin('avatarProfile', Thrift.Type.STRUCT, 44);
    this.avatarProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GeolocationAccuracy = module.exports.GeolocationAccuracy = function(args) {
  this.radiusMeters = null;
  this.radiusConfidence = null;
  if (args) {
    if (args.radiusMeters !== undefined && args.radiusMeters !== null) {
      this.radiusMeters = args.radiusMeters;
    }
    if (args.radiusConfidence !== undefined && args.radiusConfidence !== null) {
      this.radiusConfidence = args.radiusConfidence;
    }
  }
};
GeolocationAccuracy.prototype = {};
GeolocationAccuracy.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusMeters = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusConfidence = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationAccuracy.prototype.write = function(output) {
  output.writeStructBegin('GeolocationAccuracy');
  if (this.radiusMeters !== null && this.radiusMeters !== undefined) {
    output.writeFieldBegin('radiusMeters', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.radiusMeters);
    output.writeFieldEnd();
  }
  if (this.radiusConfidence !== null && this.radiusConfidence !== undefined) {
    output.writeFieldBegin('radiusConfidence', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.radiusConfidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Location = module.exports.Location = function(args) {
  this.title = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  this.phone = null;
  this.categoryId = null;
  this.provider = null;
  this.accuracy = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.accuracy !== undefined && args.accuracy !== null) {
      this.accuracy = new ttypes.GeolocationAccuracy(args.accuracy);
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.categoryId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.accuracy = new ttypes.GeolocationAccuracy();
        this.accuracy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.STRING, 6);
    output.writeString(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 7);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.STRUCT, 8);
    this.accuracy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Message = module.exports.Message = function(args) {
  this.toType = null;
  this.id = null;
  this.createdTime = null;
  this.deliveredTime = null;
  this.text = null;
  this.location = null;
  this.hasContent = null;
  this.contentType = null;
  this.contentMetadata = null;
  this.contentPreview = null;
  this.sessionId = null;
  this.chunks = null;
  this.relatedMessageId = null;
  this.messageRelationType = null;
  this.readCount = null;
  this.relatedMessageServiceCode = null;
  this.appExtensionType = null;
  this._from = null;
  this.to = null;
  if (args) {
    if (args.toType !== undefined && args.toType !== null) {
      this.toType = args.toType;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Location(args.location);
    }
    if (args.hasContent !== undefined && args.hasContent !== null) {
      this.hasContent = args.hasContent;
    }
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
    if (args.contentPreview !== undefined && args.contentPreview !== null) {
      this.contentPreview = args.contentPreview;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.chunks !== undefined && args.chunks !== null) {
      this.chunks = Thrift.copyList(args.chunks, [null]);
    }
    if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
      this.relatedMessageId = args.relatedMessageId;
    }
    if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
      this.messageRelationType = args.messageRelationType;
    }
    if (args.readCount !== undefined && args.readCount !== null) {
      this.readCount = args.readCount;
    }
    if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
      this.relatedMessageServiceCode = args.relatedMessageServiceCode;
    }
    if (args.appExtensionType !== undefined && args.appExtensionType !== null) {
      this.appExtensionType = args.appExtensionType;
    }
    if (args._from !== undefined && args._from !== null) {
      this._from = args._from;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.toType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.hasContent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        this.contentMetadata = {};
        var _rtmp315 = input.readMapBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var key17 = null;
          var val18 = null;
          key17 = input.readString();
          val18 = input.readString();
          this.contentMetadata[key17] = val18;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.contentPreview = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BYTE) {
        this.sessionId = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        this.chunks = [];
        var _rtmp320 = input.readListBegin();
        var _size19 = _rtmp320.size || 0;
        for (var _i21 = 0; _i21 < _size19; ++_i21) {
          var elem22 = null;
          elem22 = input.readString();
          this.chunks.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.relatedMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.messageRelationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.readCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.relatedMessageServiceCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.appExtensionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._from = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.toType !== null && this.toType !== undefined) {
    output.writeFieldBegin('toType', Thrift.Type.I32, 3);
    output.writeI32(this.toType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 6);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 10);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.hasContent !== null && this.hasContent !== undefined) {
    output.writeFieldBegin('hasContent', Thrift.Type.BOOL, 14);
    output.writeBool(this.hasContent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 15);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter23 in this.contentMetadata) {
      if (this.contentMetadata.hasOwnProperty(kiter23)) {
        var viter24 = this.contentMetadata[kiter23];
        output.writeString(kiter23);
        output.writeString(viter24);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.contentPreview !== null && this.contentPreview !== undefined) {
    output.writeFieldBegin('contentPreview', Thrift.Type.STRING, 17);
    output.writeString(this.contentPreview);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 19);
    output.writeByte(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.chunks !== null && this.chunks !== undefined) {
    output.writeFieldBegin('chunks', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRING, this.chunks.length);
    for (var iter25 in this.chunks) {
      if (this.chunks.hasOwnProperty(iter25)) {
        iter25 = this.chunks[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedMessageId !== null && this.relatedMessageId !== undefined) {
    output.writeFieldBegin('relatedMessageId', Thrift.Type.STRING, 21);
    output.writeString(this.relatedMessageId);
    output.writeFieldEnd();
  }
  if (this.messageRelationType !== null && this.messageRelationType !== undefined) {
    output.writeFieldBegin('messageRelationType', Thrift.Type.I32, 22);
    output.writeI32(this.messageRelationType);
    output.writeFieldEnd();
  }
  if (this.readCount !== null && this.readCount !== undefined) {
    output.writeFieldBegin('readCount', Thrift.Type.I32, 23);
    output.writeI32(this.readCount);
    output.writeFieldEnd();
  }
  if (this.relatedMessageServiceCode !== null && this.relatedMessageServiceCode !== undefined) {
    output.writeFieldBegin('relatedMessageServiceCode', Thrift.Type.I32, 24);
    output.writeI32(this.relatedMessageServiceCode);
    output.writeFieldEnd();
  }
  if (this.appExtensionType !== null && this.appExtensionType !== undefined) {
    output.writeFieldBegin('appExtensionType', Thrift.Type.I32, 25);
    output.writeI32(this.appExtensionType);
    output.writeFieldEnd();
  }
  if (this._from !== null && this._from !== undefined) {
    output.writeFieldBegin('_from', Thrift.Type.STRING, 1);
    output.writeString(this._from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Operation = module.exports.Operation = function(args) {
  this.revision = null;
  this.createdTime = null;
  this.type = null;
  this.reqSeq = null;
  this.checksum = null;
  this.status = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  this.message = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.checksum !== undefined && args.checksum !== null) {
      this.checksum = args.checksum;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
Operation.prototype = {};
Operation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.reqSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.checksum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Operation.prototype.write = function(output) {
  output.writeStructBegin('Operation');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I64, 4);
    output.writeI64(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.checksum !== null && this.checksum !== undefined) {
    output.writeFieldBegin('checksum', Thrift.Type.STRING, 5);
    output.writeString(this.checksum);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Room = module.exports.Room = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.contacts = null;
  this.notificationDisabled = null;
  this.memberMids = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [ttypes.Contact]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
  }
};
Room.prototype = {};
Room.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.contacts = [];
        var _rtmp327 = input.readListBegin();
        var _size26 = _rtmp327.size || 0;
        for (var _i28 = 0; _i28 < _size26; ++_i28) {
          var elem29 = null;
          elem29 = new ttypes.Contact();
          elem29.read(input);
          this.contacts.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.LIST) {
        this.memberMids = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString();
          this.memberMids.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Room.prototype.write = function(output) {
  output.writeStructBegin('Room');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
    for (var iter34 in this.contacts) {
      if (this.contacts.hasOwnProperty(iter34)) {
        iter34 = this.contacts[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter35 in this.memberMids) {
      if (this.memberMids.hasOwnProperty(iter35)) {
        iter35 = this.memberMids[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateChatResponse = module.exports.UpdateChatResponse = function(args) {
};
UpdateChatResponse.prototype = {};
UpdateChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateChatResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupExtra = module.exports.GroupExtra = function(args) {
  this.creator = null;
  this.preventedJoinByTicket = null;
  this.invitationTicket = null;
  this.memberMids = null;
  this.inviteeMids = null;
  if (args) {
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
      this.preventedJoinByTicket = args.preventedJoinByTicket;
    }
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyMap(args.memberMids, [null]);
    }
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyMap(args.inviteeMids, [null]);
    }
  }
};
GroupExtra.prototype = {};
GroupExtra.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.preventedJoinByTicket = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.memberMids = {};
        var _rtmp337 = input.readMapBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var key39 = null;
          var val40 = null;
          key39 = input.readString();
          val40 = input.readI64();
          this.memberMids[key39] = val40;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.inviteeMids = {};
        var _rtmp342 = input.readMapBegin();
        var _size41 = _rtmp342.size || 0;
        for (var _i43 = 0; _i43 < _size41; ++_i43) {
          var key44 = null;
          var val45 = null;
          key44 = input.readString();
          val45 = input.readI64();
          this.inviteeMids[key44] = val45;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupExtra.prototype.write = function(output) {
  output.writeStructBegin('GroupExtra');
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 1);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
    output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 2);
    output.writeBool(this.preventedJoinByTicket);
    output.writeFieldEnd();
  }
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 3);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.memberMids));
    for (var kiter46 in this.memberMids) {
      if (this.memberMids.hasOwnProperty(kiter46)) {
        var viter47 = this.memberMids[kiter46];
        output.writeString(kiter46);
        output.writeI64(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.inviteeMids));
    for (var kiter48 in this.inviteeMids) {
      if (this.inviteeMids.hasOwnProperty(kiter48)) {
        var viter49 = this.inviteeMids[kiter48];
        output.writeString(kiter48);
        output.writeI64(viter49);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeerExtra = module.exports.PeerExtra = function(args) {
};
PeerExtra.prototype = {};
PeerExtra.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeerExtra.prototype.write = function(output) {
  output.writeStructBegin('PeerExtra');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Extra = module.exports.Extra = function(args) {
  this.groupExtra = null;
  this.peerExtra = null;
  if (args) {
    if (args.groupExtra !== undefined && args.groupExtra !== null) {
      this.groupExtra = new ttypes.GroupExtra(args.groupExtra);
    }
    if (args.peerExtra !== undefined && args.peerExtra !== null) {
      this.peerExtra = new ttypes.PeerExtra(args.peerExtra);
    }
  }
};
Extra.prototype = {};
Extra.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupExtra = new ttypes.GroupExtra();
        this.groupExtra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.peerExtra = new ttypes.PeerExtra();
        this.peerExtra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Extra.prototype.write = function(output) {
  output.writeStructBegin('Extra');
  if (this.groupExtra !== null && this.groupExtra !== undefined) {
    output.writeFieldBegin('groupExtra', Thrift.Type.STRUCT, 1);
    this.groupExtra.write(output);
    output.writeFieldEnd();
  }
  if (this.peerExtra !== null && this.peerExtra !== undefined) {
    output.writeFieldBegin('peerExtra', Thrift.Type.STRUCT, 2);
    this.peerExtra.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Chat = module.exports.Chat = function(args) {
  this.type = null;
  this.chatMid = null;
  this.createdTime = null;
  this.notificationDisabled = null;
  this.favoriteTimestamp = null;
  this.chatName = null;
  this.picturePath = null;
  this.extra = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
    if (args.chatName !== undefined && args.chatName !== null) {
      this.chatName = args.chatName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = new ttypes.Extra(args.extra);
    }
  }
};
Chat.prototype = {};
Chat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.chatName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.extra = new ttypes.Extra();
        this.extra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Chat.prototype.write = function(output) {
  output.writeStructBegin('Chat');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 3);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 5);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  if (this.chatName !== null && this.chatName !== undefined) {
    output.writeFieldBegin('chatName', Thrift.Type.STRING, 6);
    output.writeString(this.chatName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 7);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.STRUCT, 8);
    this.extra.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateChatRequest = module.exports.UpdateChatRequest = function(args) {
  this.reqSeq = null;
  this.chat = null;
  this.updatedAttribute = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new ttypes.Chat(args.chat);
    }
    if (args.updatedAttribute !== undefined && args.updatedAttribute !== null) {
      this.updatedAttribute = args.updatedAttribute;
    }
  }
};
UpdateChatRequest.prototype = {};
UpdateChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new ttypes.Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updatedAttribute = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateChatRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 2);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  if (this.updatedAttribute !== null && this.updatedAttribute !== undefined) {
    output.writeFieldBegin('updatedAttribute', Thrift.Type.I32, 3);
    output.writeI32(this.updatedAttribute);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetChatsResponse = module.exports.GetChatsResponse = function(args) {
  this.chats = null;
  if (args) {
    if (args.chats !== undefined && args.chats !== null) {
      this.chats = Thrift.copyList(args.chats, [ttypes.Chat]);
    }
  }
};
GetChatsResponse.prototype = {};
GetChatsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.chats = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.Chat();
          elem53.read(input);
          this.chats.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetChatsResponse');
  if (this.chats !== null && this.chats !== undefined) {
    output.writeFieldBegin('chats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.chats.length);
    for (var iter54 in this.chats) {
      if (this.chats.hasOwnProperty(iter54)) {
        iter54 = this.chats[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetChatsRequest = module.exports.GetChatsRequest = function(args) {
  this.chatMids = null;
  this.withMembers = null;
  this.withInvitees = null;
  if (args) {
    if (args.chatMids !== undefined && args.chatMids !== null) {
      this.chatMids = Thrift.copyList(args.chatMids, [null]);
    }
    if (args.withMembers !== undefined && args.withMembers !== null) {
      this.withMembers = args.withMembers;
    }
    if (args.withInvitees !== undefined && args.withInvitees !== null) {
      this.withInvitees = args.withInvitees;
    }
  }
};
GetChatsRequest.prototype = {};
GetChatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.chatMids = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readString();
          this.chatMids.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withMembers = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withInvitees = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetChatsRequest');
  if (this.chatMids !== null && this.chatMids !== undefined) {
    output.writeFieldBegin('chatMids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.chatMids.length);
    for (var iter59 in this.chatMids) {
      if (this.chatMids.hasOwnProperty(iter59)) {
        iter59 = this.chatMids[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withMembers !== null && this.withMembers !== undefined) {
    output.writeFieldBegin('withMembers', Thrift.Type.BOOL, 2);
    output.writeBool(this.withMembers);
    output.writeFieldEnd();
  }
  if (this.withInvitees !== null && this.withInvitees !== undefined) {
    output.writeFieldBegin('withInvitees', Thrift.Type.BOOL, 3);
    output.writeBool(this.withInvitees);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReissueChatTicketRequest = module.exports.ReissueChatTicketRequest = function(args) {
  this.reqSeq = null;
  this.groupMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
  }
};
ReissueChatTicketRequest.prototype = {};
ReissueChatTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReissueChatTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('ReissueChatTicketRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 2);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReissueChatTicketResponse = module.exports.ReissueChatTicketResponse = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
ReissueChatTicketResponse.prototype = {};
ReissueChatTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReissueChatTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('ReissueChatTicketResponse');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEPublicKey = module.exports.E2EEPublicKey = function(args) {
  this.version = null;
  this.keyId = null;
  this.keyData = null;
  this.createdTime = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
    if (args.keyData !== undefined && args.keyData !== null) {
      this.keyData = args.keyData;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
E2EEPublicKey.prototype = {};
E2EEPublicKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEPublicKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEPublicKey');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  if (this.keyData !== null && this.keyData !== undefined) {
    output.writeFieldBegin('keyData', Thrift.Type.STRING, 4);
    output.writeString(this.keyData);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEGroupSharedKey = module.exports.E2EEGroupSharedKey = function(args) {
  this.keyVersion = null;
  this.groupKeyId = null;
  this.creator = null;
  this.creatorKeyId = null;
  this.receiver = null;
  this.receiverKeyId = null;
  this.encryptedSharedKey = null;
  this.allowedTypes = null;
  this.specVersion = null;
  if (args) {
    if (args.keyVersion !== undefined && args.keyVersion !== null) {
      this.keyVersion = args.keyVersion;
    }
    if (args.groupKeyId !== undefined && args.groupKeyId !== null) {
      this.groupKeyId = args.groupKeyId;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.creatorKeyId !== undefined && args.creatorKeyId !== null) {
      this.creatorKeyId = args.creatorKeyId;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.receiverKeyId !== undefined && args.receiverKeyId !== null) {
      this.receiverKeyId = args.receiverKeyId;
    }
    if (args.encryptedSharedKey !== undefined && args.encryptedSharedKey !== null) {
      this.encryptedSharedKey = args.encryptedSharedKey;
    }
    if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
      this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
    }
    if (args.specVersion !== undefined && args.specVersion !== null) {
      this.specVersion = args.specVersion;
    }
  }
};
E2EEGroupSharedKey.prototype = {};
E2EEGroupSharedKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.keyVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.groupKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.creatorKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.receiverKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedSharedKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        this.allowedTypes = [];
        var _rtmp361 = input.readSetBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readI32();
          this.allowedTypes.push(elem63);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.specVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEGroupSharedKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEGroupSharedKey');
  if (this.keyVersion !== null && this.keyVersion !== undefined) {
    output.writeFieldBegin('keyVersion', Thrift.Type.I32, 1);
    output.writeI32(this.keyVersion);
    output.writeFieldEnd();
  }
  if (this.groupKeyId !== null && this.groupKeyId !== undefined) {
    output.writeFieldBegin('groupKeyId', Thrift.Type.I32, 2);
    output.writeI32(this.groupKeyId);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 3);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.creatorKeyId !== null && this.creatorKeyId !== undefined) {
    output.writeFieldBegin('creatorKeyId', Thrift.Type.I32, 4);
    output.writeI32(this.creatorKeyId);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 5);
    output.writeString(this.receiver);
    output.writeFieldEnd();
  }
  if (this.receiverKeyId !== null && this.receiverKeyId !== undefined) {
    output.writeFieldBegin('receiverKeyId', Thrift.Type.I32, 6);
    output.writeI32(this.receiverKeyId);
    output.writeFieldEnd();
  }
  if (this.encryptedSharedKey !== null && this.encryptedSharedKey !== undefined) {
    output.writeFieldBegin('encryptedSharedKey', Thrift.Type.STRING, 7);
    output.writeString(this.encryptedSharedKey);
    output.writeFieldEnd();
  }
  if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
    output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
    for (var iter64 in this.allowedTypes) {
      if (this.allowedTypes.hasOwnProperty(iter64)) {
        iter64 = this.allowedTypes[iter64];
        output.writeI32(iter64);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.specVersion !== null && this.specVersion !== undefined) {
    output.writeFieldBegin('specVersion', Thrift.Type.I32, 9);
    output.writeI32(this.specVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Configurations = module.exports.Configurations = function(args) {
  this.revision = null;
  this.configMap = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.configMap !== undefined && args.configMap !== null) {
      this.configMap = Thrift.copyMap(args.configMap, [null]);
    }
  }
};
Configurations.prototype = {};
Configurations.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.configMap = {};
        var _rtmp366 = input.readMapBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var key68 = null;
          var val69 = null;
          key68 = input.readString();
          val69 = input.readString();
          this.configMap[key68] = val69;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Configurations.prototype.write = function(output) {
  output.writeStructBegin('Configurations');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.configMap !== null && this.configMap !== undefined) {
    output.writeFieldBegin('configMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configMap));
    for (var kiter70 in this.configMap) {
      if (this.configMap.hasOwnProperty(kiter70)) {
        var viter71 = this.configMap[kiter70];
        output.writeString(kiter70);
        output.writeString(viter71);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Profile = module.exports.Profile = function(args) {
  this.email = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.allowSearchByUserid = null;
  this.allowSearchByEmail = null;
  this.picturePath = null;
  this.musicProfile = null;
  this.videoProfile = null;
  this.statusMessageContentMetadata = null;
  this.avatarProfile = null;
  this.mid = null;
  this.userid = null;
  this.regionCode = null;
  this.phone = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
      this.allowSearchByUserid = args.allowSearchByUserid;
    }
    if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
      this.allowSearchByEmail = args.allowSearchByEmail;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
    if (args.statusMessageContentMetadata !== undefined && args.statusMessageContentMetadata !== null) {
      this.statusMessageContentMetadata = Thrift.copyMap(args.statusMessageContentMetadata, [null]);
    }
    if (args.avatarProfile !== undefined && args.avatarProfile !== null) {
      this.avatarProfile = new ttypes.AvatarProfile(args.avatarProfile);
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
  }
};
Profile.prototype = {};
Profile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByUserid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByEmail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.MAP) {
        this.statusMessageContentMetadata = {};
        var _rtmp373 = input.readMapBegin();
        var _size72 = _rtmp373.size || 0;
        for (var _i74 = 0; _i74 < _size72; ++_i74) {
          var key75 = null;
          var val76 = null;
          key75 = input.readString();
          val76 = input.readString();
          this.statusMessageContentMetadata[key75] = val76;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarProfile = new ttypes.AvatarProfile();
        this.avatarProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile.prototype.write = function(output) {
  output.writeStructBegin('Profile');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 20);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 21);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 22);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 23);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 24);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.allowSearchByUserid !== null && this.allowSearchByUserid !== undefined) {
    output.writeFieldBegin('allowSearchByUserid', Thrift.Type.BOOL, 31);
    output.writeBool(this.allowSearchByUserid);
    output.writeFieldEnd();
  }
  if (this.allowSearchByEmail !== null && this.allowSearchByEmail !== undefined) {
    output.writeFieldBegin('allowSearchByEmail', Thrift.Type.BOOL, 32);
    output.writeBool(this.allowSearchByEmail);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 33);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 34);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 35);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  if (this.statusMessageContentMetadata !== null && this.statusMessageContentMetadata !== undefined) {
    output.writeFieldBegin('statusMessageContentMetadata', Thrift.Type.MAP, 36);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.statusMessageContentMetadata));
    for (var kiter77 in this.statusMessageContentMetadata) {
      if (this.statusMessageContentMetadata.hasOwnProperty(kiter77)) {
        var viter78 = this.statusMessageContentMetadata[kiter77];
        output.writeString(kiter77);
        output.writeString(viter78);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.avatarProfile !== null && this.avatarProfile !== undefined) {
    output.writeFieldBegin('avatarProfile', Thrift.Type.STRUCT, 37);
    this.avatarProfile.write(output);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 12);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VerificationSessionData = module.exports.VerificationSessionData = function(args) {
  this.sessionId = null;
  this.method = null;
  this.callback = null;
  this.normalizedPhone = null;
  this.countryCode = null;
  this.nationalSignificantNumber = null;
  this.availableVerificationMethods = null;
  this.callerIdMask = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.callback !== undefined && args.callback !== null) {
      this.callback = args.callback;
    }
    if (args.normalizedPhone !== undefined && args.normalizedPhone !== null) {
      this.normalizedPhone = args.normalizedPhone;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.nationalSignificantNumber !== undefined && args.nationalSignificantNumber !== null) {
      this.nationalSignificantNumber = args.nationalSignificantNumber;
    }
    if (args.availableVerificationMethods !== undefined && args.availableVerificationMethods !== null) {
      this.availableVerificationMethods = Thrift.copyList(args.availableVerificationMethods, [null]);
    }
    if (args.callerIdMask !== undefined && args.callerIdMask !== null) {
      this.callerIdMask = args.callerIdMask;
    }
  }
};
VerificationSessionData.prototype = {};
VerificationSessionData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.callback = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.normalizedPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nationalSignificantNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.availableVerificationMethods = [];
        var _rtmp380 = input.readListBegin();
        var _size79 = _rtmp380.size || 0;
        for (var _i81 = 0; _i81 < _size79; ++_i81) {
          var elem82 = null;
          elem82 = input.readI32();
          this.availableVerificationMethods.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.callerIdMask = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerificationSessionData.prototype.write = function(output) {
  output.writeStructBegin('VerificationSessionData');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 2);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.callback !== null && this.callback !== undefined) {
    output.writeFieldBegin('callback', Thrift.Type.STRING, 3);
    output.writeString(this.callback);
    output.writeFieldEnd();
  }
  if (this.normalizedPhone !== null && this.normalizedPhone !== undefined) {
    output.writeFieldBegin('normalizedPhone', Thrift.Type.STRING, 4);
    output.writeString(this.normalizedPhone);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 5);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.nationalSignificantNumber !== null && this.nationalSignificantNumber !== undefined) {
    output.writeFieldBegin('nationalSignificantNumber', Thrift.Type.STRING, 6);
    output.writeString(this.nationalSignificantNumber);
    output.writeFieldEnd();
  }
  if (this.availableVerificationMethods !== null && this.availableVerificationMethods !== undefined) {
    output.writeFieldBegin('availableVerificationMethods', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.availableVerificationMethods.length);
    for (var iter83 in this.availableVerificationMethods) {
      if (this.availableVerificationMethods.hasOwnProperty(iter83)) {
        iter83 = this.availableVerificationMethods[iter83];
        output.writeI32(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.callerIdMask !== null && this.callerIdMask !== undefined) {
    output.writeFieldBegin('callerIdMask', Thrift.Type.STRING, 8);
    output.writeString(this.callerIdMask);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceInfo = module.exports.DeviceInfo = function(args) {
  this.applicationType = null;
  this.deviceName = null;
  this.systemName = null;
  this.systemVersion = null;
  this.model = null;
  this.carrierCode = null;
  this.carrierName = null;
  this.webViewVersion = null;
  if (args) {
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.systemVersion !== undefined && args.systemVersion !== null) {
      this.systemVersion = args.systemVersion;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.carrierCode !== undefined && args.carrierCode !== null) {
      this.carrierCode = args.carrierCode;
    }
    if (args.carrierName !== undefined && args.carrierName !== null) {
      this.carrierName = args.carrierName;
    }
    if (args.webViewVersion !== undefined && args.webViewVersion !== null) {
      this.webViewVersion = args.webViewVersion;
    }
  }
};
DeviceInfo.prototype = {};
DeviceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.carrierCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.carrierName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.webViewVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceInfo.prototype.write = function(output) {
  output.writeStructBegin('DeviceInfo');
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 20);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 1);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.systemVersion !== null && this.systemVersion !== undefined) {
    output.writeFieldBegin('systemVersion', Thrift.Type.STRING, 3);
    output.writeString(this.systemVersion);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 4);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.carrierCode !== null && this.carrierCode !== undefined) {
    output.writeFieldBegin('carrierCode', Thrift.Type.I32, 10);
    output.writeI32(this.carrierCode);
    output.writeFieldEnd();
  }
  if (this.carrierName !== null && this.carrierName !== undefined) {
    output.writeFieldBegin('carrierName', Thrift.Type.STRING, 11);
    output.writeString(this.carrierName);
    output.writeFieldEnd();
  }
  if (this.webViewVersion !== null && this.webViewVersion !== undefined) {
    output.writeFieldBegin('webViewVersion', Thrift.Type.STRING, 5);
    output.writeString(this.webViewVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SIMInfo = module.exports.SIMInfo = function(args) {
  this.phoneNumber = null;
  this.countryCode = null;
  if (args) {
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
  }
};
SIMInfo.prototype = {};
SIMInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SIMInfo.prototype.write = function(output) {
  output.writeStructBegin('SIMInfo');
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 1);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PhoneVerificationResult = module.exports.PhoneVerificationResult = function(args) {
  this.verificationResult = null;
  this.accountMigrationCheckType = null;
  this.recommendAddFriends = null;
  if (args) {
    if (args.verificationResult !== undefined && args.verificationResult !== null) {
      this.verificationResult = args.verificationResult;
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
    if (args.recommendAddFriends !== undefined && args.recommendAddFriends !== null) {
      this.recommendAddFriends = args.recommendAddFriends;
    }
  }
};
PhoneVerificationResult.prototype = {};
PhoneVerificationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.verificationResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendAddFriends = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhoneVerificationResult.prototype.write = function(output) {
  output.writeStructBegin('PhoneVerificationResult');
  if (this.verificationResult !== null && this.verificationResult !== undefined) {
    output.writeFieldBegin('verificationResult', Thrift.Type.I32, 1);
    output.writeI32(this.verificationResult);
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 2);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  if (this.recommendAddFriends !== null && this.recommendAddFriends !== undefined) {
    output.writeFieldBegin('recommendAddFriends', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommendAddFriends);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Settings = module.exports.Settings = function(args) {
  this.notificationThumbnail = null;
  this.privacySyncContacts = null;
  this.privacySearchByPhoneNumber = null;
  this.privacySearchByUserid = null;
  this.privacySearchByEmail = null;
  this.privacyAllowSecondaryDeviceLogin = null;
  this.privacyProfileImagePostToMyhome = null;
  this.privacyProfileMusicPostToMyhome = null;
  this.privacyAllowProfileHistory = null;
  this.privacyStatusMessageHistory = null;
  this.privacyReceiveMessagesFromNotFriend = null;
  this.privacyAgreeUseLineCoinToPaidCall = null;
  this.privacyAgreeUsePaidCall = null;
  this.privacyAllowFriendRequest = null;
  this.privacyAllowNearby = null;
  this.privacySharePersonalInfoToFriends = null;
  this.privacyAgeResult = null;
  this.privacyAgeResultReceived = null;
  this.privacyAllowFollow = null;
  this.privacyShowFollowList = null;
  this.contactMyTicket = null;
  this.identityProvider = null;
  this.identityIdentifier = null;
  this.snsAccounts = null;
  this.phoneRegistration = null;
  this.emailConfirmationStatus = null;
  this.accountMigrationPincodeType = null;
  this.enforcedInputAccountMigrationPincode = null;
  this.securityCenterSettingsType = null;
  this.allowUnregistrationSecondaryDevice = null;
  this.preferenceLocale = null;
  this.customModes = null;
  this.e2eeEnable = null;
  this.hitokotoBackupRequested = null;
  this.agreementNearbyTime = null;
  this.agreementSquareTime = null;
  this.botUseAgreementAcceptedAt = null;
  this.agreementShakeFunction = null;
  this.agreementMobileContactName = null;
  this.agreementSoundToText = null;
  this.privacyPolicyVersion = null;
  this.notificationEnable = null;
  this.agreementAdByWebAccess = null;
  this.notificationMuteExpiration = null;
  this.agreementPhoneNumberMatching = null;
  this.notificationNewMessage = null;
  this.agreementCommunicationInfo = null;
  this.notificationGroupInvitation = null;
  this.agreementThingsWirelessCommunication = null;
  this.notificationShowMessage = null;
  this.agreementGdpr = null;
  this.notificationIncomingCall = null;
  this.agreementProvideLocation = null;
  this.notificationSoundMessage = null;
  this.agreementBeacon = null;
  this.notificationSoundGroup = null;
  this.agreementContentsSuggest = null;
  this.notificationDisabledWithSub = null;
  this.agreementContentsSuggestDataCollection = null;
  this.notificationPayment = null;
  this.agreementOcrImageCollection = null;
  this.notificationMention = null;
  if (args) {
    if (args.notificationThumbnail !== undefined && args.notificationThumbnail !== null) {
      this.notificationThumbnail = args.notificationThumbnail;
    }
    if (args.privacySyncContacts !== undefined && args.privacySyncContacts !== null) {
      this.privacySyncContacts = args.privacySyncContacts;
    }
    if (args.privacySearchByPhoneNumber !== undefined && args.privacySearchByPhoneNumber !== null) {
      this.privacySearchByPhoneNumber = args.privacySearchByPhoneNumber;
    }
    if (args.privacySearchByUserid !== undefined && args.privacySearchByUserid !== null) {
      this.privacySearchByUserid = args.privacySearchByUserid;
    }
    if (args.privacySearchByEmail !== undefined && args.privacySearchByEmail !== null) {
      this.privacySearchByEmail = args.privacySearchByEmail;
    }
    if (args.privacyAllowSecondaryDeviceLogin !== undefined && args.privacyAllowSecondaryDeviceLogin !== null) {
      this.privacyAllowSecondaryDeviceLogin = args.privacyAllowSecondaryDeviceLogin;
    }
    if (args.privacyProfileImagePostToMyhome !== undefined && args.privacyProfileImagePostToMyhome !== null) {
      this.privacyProfileImagePostToMyhome = args.privacyProfileImagePostToMyhome;
    }
    if (args.privacyProfileMusicPostToMyhome !== undefined && args.privacyProfileMusicPostToMyhome !== null) {
      this.privacyProfileMusicPostToMyhome = args.privacyProfileMusicPostToMyhome;
    }
    if (args.privacyAllowProfileHistory !== undefined && args.privacyAllowProfileHistory !== null) {
      this.privacyAllowProfileHistory = args.privacyAllowProfileHistory;
    }
    if (args.privacyStatusMessageHistory !== undefined && args.privacyStatusMessageHistory !== null) {
      this.privacyStatusMessageHistory = args.privacyStatusMessageHistory;
    }
    if (args.privacyReceiveMessagesFromNotFriend !== undefined && args.privacyReceiveMessagesFromNotFriend !== null) {
      this.privacyReceiveMessagesFromNotFriend = args.privacyReceiveMessagesFromNotFriend;
    }
    if (args.privacyAgreeUseLineCoinToPaidCall !== undefined && args.privacyAgreeUseLineCoinToPaidCall !== null) {
      this.privacyAgreeUseLineCoinToPaidCall = args.privacyAgreeUseLineCoinToPaidCall;
    }
    if (args.privacyAgreeUsePaidCall !== undefined && args.privacyAgreeUsePaidCall !== null) {
      this.privacyAgreeUsePaidCall = args.privacyAgreeUsePaidCall;
    }
    if (args.privacyAllowFriendRequest !== undefined && args.privacyAllowFriendRequest !== null) {
      this.privacyAllowFriendRequest = args.privacyAllowFriendRequest;
    }
    if (args.privacyAllowNearby !== undefined && args.privacyAllowNearby !== null) {
      this.privacyAllowNearby = args.privacyAllowNearby;
    }
    if (args.privacySharePersonalInfoToFriends !== undefined && args.privacySharePersonalInfoToFriends !== null) {
      this.privacySharePersonalInfoToFriends = args.privacySharePersonalInfoToFriends;
    }
    if (args.privacyAgeResult !== undefined && args.privacyAgeResult !== null) {
      this.privacyAgeResult = args.privacyAgeResult;
    }
    if (args.privacyAgeResultReceived !== undefined && args.privacyAgeResultReceived !== null) {
      this.privacyAgeResultReceived = args.privacyAgeResultReceived;
    }
    if (args.privacyAllowFollow !== undefined && args.privacyAllowFollow !== null) {
      this.privacyAllowFollow = args.privacyAllowFollow;
    }
    if (args.privacyShowFollowList !== undefined && args.privacyShowFollowList !== null) {
      this.privacyShowFollowList = args.privacyShowFollowList;
    }
    if (args.contactMyTicket !== undefined && args.contactMyTicket !== null) {
      this.contactMyTicket = args.contactMyTicket;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identityIdentifier !== undefined && args.identityIdentifier !== null) {
      this.identityIdentifier = args.identityIdentifier;
    }
    if (args.snsAccounts !== undefined && args.snsAccounts !== null) {
      this.snsAccounts = Thrift.copyMap(args.snsAccounts, [null]);
    }
    if (args.phoneRegistration !== undefined && args.phoneRegistration !== null) {
      this.phoneRegistration = args.phoneRegistration;
    }
    if (args.emailConfirmationStatus !== undefined && args.emailConfirmationStatus !== null) {
      this.emailConfirmationStatus = args.emailConfirmationStatus;
    }
    if (args.accountMigrationPincodeType !== undefined && args.accountMigrationPincodeType !== null) {
      this.accountMigrationPincodeType = args.accountMigrationPincodeType;
    }
    if (args.enforcedInputAccountMigrationPincode !== undefined && args.enforcedInputAccountMigrationPincode !== null) {
      this.enforcedInputAccountMigrationPincode = args.enforcedInputAccountMigrationPincode;
    }
    if (args.securityCenterSettingsType !== undefined && args.securityCenterSettingsType !== null) {
      this.securityCenterSettingsType = args.securityCenterSettingsType;
    }
    if (args.allowUnregistrationSecondaryDevice !== undefined && args.allowUnregistrationSecondaryDevice !== null) {
      this.allowUnregistrationSecondaryDevice = args.allowUnregistrationSecondaryDevice;
    }
    if (args.preferenceLocale !== undefined && args.preferenceLocale !== null) {
      this.preferenceLocale = args.preferenceLocale;
    }
    if (args.customModes !== undefined && args.customModes !== null) {
      this.customModes = args.customModes;
    }
    if (args.e2eeEnable !== undefined && args.e2eeEnable !== null) {
      this.e2eeEnable = args.e2eeEnable;
    }
    if (args.hitokotoBackupRequested !== undefined && args.hitokotoBackupRequested !== null) {
      this.hitokotoBackupRequested = args.hitokotoBackupRequested;
    }
    if (args.agreementNearbyTime !== undefined && args.agreementNearbyTime !== null) {
      this.agreementNearbyTime = args.agreementNearbyTime;
    }
    if (args.agreementSquareTime !== undefined && args.agreementSquareTime !== null) {
      this.agreementSquareTime = args.agreementSquareTime;
    }
    if (args.botUseAgreementAcceptedAt !== undefined && args.botUseAgreementAcceptedAt !== null) {
      this.botUseAgreementAcceptedAt = args.botUseAgreementAcceptedAt;
    }
    if (args.agreementShakeFunction !== undefined && args.agreementShakeFunction !== null) {
      this.agreementShakeFunction = args.agreementShakeFunction;
    }
    if (args.agreementMobileContactName !== undefined && args.agreementMobileContactName !== null) {
      this.agreementMobileContactName = args.agreementMobileContactName;
    }
    if (args.agreementSoundToText !== undefined && args.agreementSoundToText !== null) {
      this.agreementSoundToText = args.agreementSoundToText;
    }
    if (args.privacyPolicyVersion !== undefined && args.privacyPolicyVersion !== null) {
      this.privacyPolicyVersion = args.privacyPolicyVersion;
    }
    if (args.notificationEnable !== undefined && args.notificationEnable !== null) {
      this.notificationEnable = args.notificationEnable;
    }
    if (args.agreementAdByWebAccess !== undefined && args.agreementAdByWebAccess !== null) {
      this.agreementAdByWebAccess = args.agreementAdByWebAccess;
    }
    if (args.notificationMuteExpiration !== undefined && args.notificationMuteExpiration !== null) {
      this.notificationMuteExpiration = args.notificationMuteExpiration;
    }
    if (args.agreementPhoneNumberMatching !== undefined && args.agreementPhoneNumberMatching !== null) {
      this.agreementPhoneNumberMatching = args.agreementPhoneNumberMatching;
    }
    if (args.notificationNewMessage !== undefined && args.notificationNewMessage !== null) {
      this.notificationNewMessage = args.notificationNewMessage;
    }
    if (args.agreementCommunicationInfo !== undefined && args.agreementCommunicationInfo !== null) {
      this.agreementCommunicationInfo = args.agreementCommunicationInfo;
    }
    if (args.notificationGroupInvitation !== undefined && args.notificationGroupInvitation !== null) {
      this.notificationGroupInvitation = args.notificationGroupInvitation;
    }
    if (args.agreementThingsWirelessCommunication !== undefined && args.agreementThingsWirelessCommunication !== null) {
      this.agreementThingsWirelessCommunication = args.agreementThingsWirelessCommunication;
    }
    if (args.notificationShowMessage !== undefined && args.notificationShowMessage !== null) {
      this.notificationShowMessage = args.notificationShowMessage;
    }
    if (args.agreementGdpr !== undefined && args.agreementGdpr !== null) {
      this.agreementGdpr = args.agreementGdpr;
    }
    if (args.notificationIncomingCall !== undefined && args.notificationIncomingCall !== null) {
      this.notificationIncomingCall = args.notificationIncomingCall;
    }
    if (args.agreementProvideLocation !== undefined && args.agreementProvideLocation !== null) {
      this.agreementProvideLocation = args.agreementProvideLocation;
    }
    if (args.notificationSoundMessage !== undefined && args.notificationSoundMessage !== null) {
      this.notificationSoundMessage = args.notificationSoundMessage;
    }
    if (args.agreementBeacon !== undefined && args.agreementBeacon !== null) {
      this.agreementBeacon = args.agreementBeacon;
    }
    if (args.notificationSoundGroup !== undefined && args.notificationSoundGroup !== null) {
      this.notificationSoundGroup = args.notificationSoundGroup;
    }
    if (args.agreementContentsSuggest !== undefined && args.agreementContentsSuggest !== null) {
      this.agreementContentsSuggest = args.agreementContentsSuggest;
    }
    if (args.notificationDisabledWithSub !== undefined && args.notificationDisabledWithSub !== null) {
      this.notificationDisabledWithSub = args.notificationDisabledWithSub;
    }
    if (args.agreementContentsSuggestDataCollection !== undefined && args.agreementContentsSuggestDataCollection !== null) {
      this.agreementContentsSuggestDataCollection = args.agreementContentsSuggestDataCollection;
    }
    if (args.notificationPayment !== undefined && args.notificationPayment !== null) {
      this.notificationPayment = args.notificationPayment;
    }
    if (args.agreementOcrImageCollection !== undefined && args.agreementOcrImageCollection !== null) {
      this.agreementOcrImageCollection = args.agreementOcrImageCollection;
    }
    if (args.notificationMention !== undefined && args.notificationMention !== null) {
      this.notificationMention = args.notificationMention;
    }
  }
};
Settings.prototype = {};
Settings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 72:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationThumbnail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySyncContacts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByPhoneNumber = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByUserid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByEmail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowSecondaryDeviceLogin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileImagePostToMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileMusicPostToMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 85:
      if (ftype == Thrift.Type.I32) {
        this.privacyAllowProfileHistory = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.I32) {
        this.privacyStatusMessageHistory = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyReceiveMessagesFromNotFriend = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgreeUseLineCoinToPaidCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgreeUsePaidCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowFriendRequest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowNearby = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 78:
      if (ftype == Thrift.Type.I32) {
        this.privacySharePersonalInfoToFriends = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 88:
      if (ftype == Thrift.Type.I32) {
        this.privacyAgeResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 89:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgeResultReceived = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 91:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowFollow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 92:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyShowFollowList = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.contactMyTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.identityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.MAP) {
        this.snsAccounts = {};
        var _rtmp385 = input.readMapBegin();
        var _size84 = _rtmp385.size || 0;
        for (var _i86 = 0; _i86 < _size84; ++_i86) {
          var key87 = null;
          var val88 = null;
          key87 = input.readI32();
          val88 = input.readString();
          this.snsAccounts[key87] = val88;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I32) {
        this.emailConfirmationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationPincodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.BOOL) {
        this.enforcedInputAccountMigrationPincode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.I32) {
        this.securityCenterSettingsType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.BOOL) {
        this.allowUnregistrationSecondaryDevice = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.preferenceLocale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I32) {
        this.customModes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.BOOL) {
        this.e2eeEnable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.BOOL) {
        this.hitokotoBackupRequested = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.I64) {
        this.agreementNearbyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.I64) {
        this.agreementSquareTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.I64) {
        this.botUseAgreementAcceptedAt = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.I64) {
        this.agreementShakeFunction = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.I64) {
        this.agreementMobileContactName = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 73:
      if (ftype == Thrift.Type.I64) {
        this.agreementSoundToText = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 74:
      if (ftype == Thrift.Type.STRING) {
        this.privacyPolicyVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationEnable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 75:
      if (ftype == Thrift.Type.I64) {
        this.agreementAdByWebAccess = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.notificationMuteExpiration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 76:
      if (ftype == Thrift.Type.I64) {
        this.agreementPhoneNumberMatching = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationNewMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 77:
      if (ftype == Thrift.Type.I64) {
        this.agreementCommunicationInfo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationGroupInvitation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 79:
      if (ftype == Thrift.Type.I64) {
        this.agreementThingsWirelessCommunication = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationShowMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.I64) {
        this.agreementGdpr = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationIncomingCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 82:
      if (ftype == Thrift.Type.I64) {
        this.agreementProvideLocation = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 83:
      if (ftype == Thrift.Type.I64) {
        this.agreementBeacon = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundGroup = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 86:
      if (ftype == Thrift.Type.I64) {
        this.agreementContentsSuggest = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabledWithSub = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 87:
      if (ftype == Thrift.Type.I64) {
        this.agreementContentsSuggestDataCollection = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationPayment = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.I64) {
        this.agreementOcrImageCollection = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationMention = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Settings.prototype.write = function(output) {
  output.writeStructBegin('Settings');
  if (this.notificationThumbnail !== null && this.notificationThumbnail !== undefined) {
    output.writeFieldBegin('notificationThumbnail', Thrift.Type.BOOL, 72);
    output.writeBool(this.notificationThumbnail);
    output.writeFieldEnd();
  }
  if (this.privacySyncContacts !== null && this.privacySyncContacts !== undefined) {
    output.writeFieldBegin('privacySyncContacts', Thrift.Type.BOOL, 20);
    output.writeBool(this.privacySyncContacts);
    output.writeFieldEnd();
  }
  if (this.privacySearchByPhoneNumber !== null && this.privacySearchByPhoneNumber !== undefined) {
    output.writeFieldBegin('privacySearchByPhoneNumber', Thrift.Type.BOOL, 21);
    output.writeBool(this.privacySearchByPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.privacySearchByUserid !== null && this.privacySearchByUserid !== undefined) {
    output.writeFieldBegin('privacySearchByUserid', Thrift.Type.BOOL, 22);
    output.writeBool(this.privacySearchByUserid);
    output.writeFieldEnd();
  }
  if (this.privacySearchByEmail !== null && this.privacySearchByEmail !== undefined) {
    output.writeFieldBegin('privacySearchByEmail', Thrift.Type.BOOL, 23);
    output.writeBool(this.privacySearchByEmail);
    output.writeFieldEnd();
  }
  if (this.privacyAllowSecondaryDeviceLogin !== null && this.privacyAllowSecondaryDeviceLogin !== undefined) {
    output.writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift.Type.BOOL, 24);
    output.writeBool(this.privacyAllowSecondaryDeviceLogin);
    output.writeFieldEnd();
  }
  if (this.privacyProfileImagePostToMyhome !== null && this.privacyProfileImagePostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileImagePostToMyhome', Thrift.Type.BOOL, 25);
    output.writeBool(this.privacyProfileImagePostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyProfileMusicPostToMyhome !== null && this.privacyProfileMusicPostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileMusicPostToMyhome', Thrift.Type.BOOL, 63);
    output.writeBool(this.privacyProfileMusicPostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyAllowProfileHistory !== null && this.privacyAllowProfileHistory !== undefined) {
    output.writeFieldBegin('privacyAllowProfileHistory', Thrift.Type.I32, 85);
    output.writeI32(this.privacyAllowProfileHistory);
    output.writeFieldEnd();
  }
  if (this.privacyStatusMessageHistory !== null && this.privacyStatusMessageHistory !== undefined) {
    output.writeFieldBegin('privacyStatusMessageHistory', Thrift.Type.I32, 81);
    output.writeI32(this.privacyStatusMessageHistory);
    output.writeFieldEnd();
  }
  if (this.privacyReceiveMessagesFromNotFriend !== null && this.privacyReceiveMessagesFromNotFriend !== undefined) {
    output.writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift.Type.BOOL, 26);
    output.writeBool(this.privacyReceiveMessagesFromNotFriend);
    output.writeFieldEnd();
  }
  if (this.privacyAgreeUseLineCoinToPaidCall !== null && this.privacyAgreeUseLineCoinToPaidCall !== undefined) {
    output.writeFieldBegin('privacyAgreeUseLineCoinToPaidCall', Thrift.Type.BOOL, 27);
    output.writeBool(this.privacyAgreeUseLineCoinToPaidCall);
    output.writeFieldEnd();
  }
  if (this.privacyAgreeUsePaidCall !== null && this.privacyAgreeUsePaidCall !== undefined) {
    output.writeFieldBegin('privacyAgreeUsePaidCall', Thrift.Type.BOOL, 28);
    output.writeBool(this.privacyAgreeUsePaidCall);
    output.writeFieldEnd();
  }
  if (this.privacyAllowFriendRequest !== null && this.privacyAllowFriendRequest !== undefined) {
    output.writeFieldBegin('privacyAllowFriendRequest', Thrift.Type.BOOL, 29);
    output.writeBool(this.privacyAllowFriendRequest);
    output.writeFieldEnd();
  }
  if (this.privacyAllowNearby !== null && this.privacyAllowNearby !== undefined) {
    output.writeFieldBegin('privacyAllowNearby', Thrift.Type.BOOL, 65);
    output.writeBool(this.privacyAllowNearby);
    output.writeFieldEnd();
  }
  if (this.privacySharePersonalInfoToFriends !== null && this.privacySharePersonalInfoToFriends !== undefined) {
    output.writeFieldBegin('privacySharePersonalInfoToFriends', Thrift.Type.I32, 78);
    output.writeI32(this.privacySharePersonalInfoToFriends);
    output.writeFieldEnd();
  }
  if (this.privacyAgeResult !== null && this.privacyAgeResult !== undefined) {
    output.writeFieldBegin('privacyAgeResult', Thrift.Type.I32, 88);
    output.writeI32(this.privacyAgeResult);
    output.writeFieldEnd();
  }
  if (this.privacyAgeResultReceived !== null && this.privacyAgeResultReceived !== undefined) {
    output.writeFieldBegin('privacyAgeResultReceived', Thrift.Type.BOOL, 89);
    output.writeBool(this.privacyAgeResultReceived);
    output.writeFieldEnd();
  }
  if (this.privacyAllowFollow !== null && this.privacyAllowFollow !== undefined) {
    output.writeFieldBegin('privacyAllowFollow', Thrift.Type.BOOL, 91);
    output.writeBool(this.privacyAllowFollow);
    output.writeFieldEnd();
  }
  if (this.privacyShowFollowList !== null && this.privacyShowFollowList !== undefined) {
    output.writeFieldBegin('privacyShowFollowList', Thrift.Type.BOOL, 92);
    output.writeBool(this.privacyShowFollowList);
    output.writeFieldEnd();
  }
  if (this.contactMyTicket !== null && this.contactMyTicket !== undefined) {
    output.writeFieldBegin('contactMyTicket', Thrift.Type.STRING, 30);
    output.writeString(this.contactMyTicket);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 40);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identityIdentifier !== null && this.identityIdentifier !== undefined) {
    output.writeFieldBegin('identityIdentifier', Thrift.Type.STRING, 41);
    output.writeString(this.identityIdentifier);
    output.writeFieldEnd();
  }
  if (this.snsAccounts !== null && this.snsAccounts !== undefined) {
    output.writeFieldBegin('snsAccounts', Thrift.Type.MAP, 42);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.snsAccounts));
    for (var kiter89 in this.snsAccounts) {
      if (this.snsAccounts.hasOwnProperty(kiter89)) {
        var viter90 = this.snsAccounts[kiter89];
        output.writeI32(kiter89);
        output.writeString(viter90);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.phoneRegistration !== null && this.phoneRegistration !== undefined) {
    output.writeFieldBegin('phoneRegistration', Thrift.Type.BOOL, 43);
    output.writeBool(this.phoneRegistration);
    output.writeFieldEnd();
  }
  if (this.emailConfirmationStatus !== null && this.emailConfirmationStatus !== undefined) {
    output.writeFieldBegin('emailConfirmationStatus', Thrift.Type.I32, 44);
    output.writeI32(this.emailConfirmationStatus);
    output.writeFieldEnd();
  }
  if (this.accountMigrationPincodeType !== null && this.accountMigrationPincodeType !== undefined) {
    output.writeFieldBegin('accountMigrationPincodeType', Thrift.Type.I32, 45);
    output.writeI32(this.accountMigrationPincodeType);
    output.writeFieldEnd();
  }
  if (this.enforcedInputAccountMigrationPincode !== null && this.enforcedInputAccountMigrationPincode !== undefined) {
    output.writeFieldBegin('enforcedInputAccountMigrationPincode', Thrift.Type.BOOL, 46);
    output.writeBool(this.enforcedInputAccountMigrationPincode);
    output.writeFieldEnd();
  }
  if (this.securityCenterSettingsType !== null && this.securityCenterSettingsType !== undefined) {
    output.writeFieldBegin('securityCenterSettingsType', Thrift.Type.I32, 47);
    output.writeI32(this.securityCenterSettingsType);
    output.writeFieldEnd();
  }
  if (this.allowUnregistrationSecondaryDevice !== null && this.allowUnregistrationSecondaryDevice !== undefined) {
    output.writeFieldBegin('allowUnregistrationSecondaryDevice', Thrift.Type.BOOL, 48);
    output.writeBool(this.allowUnregistrationSecondaryDevice);
    output.writeFieldEnd();
  }
  if (this.preferenceLocale !== null && this.preferenceLocale !== undefined) {
    output.writeFieldBegin('preferenceLocale', Thrift.Type.STRING, 50);
    output.writeString(this.preferenceLocale);
    output.writeFieldEnd();
  }
  if (this.customModes !== null && this.customModes !== undefined) {
    output.writeFieldBegin('customModes', Thrift.Type.I32, 60);
    output.writeI32(this.customModes);
    output.writeFieldEnd();
  }
  if (this.e2eeEnable !== null && this.e2eeEnable !== undefined) {
    output.writeFieldBegin('e2eeEnable', Thrift.Type.BOOL, 61);
    output.writeBool(this.e2eeEnable);
    output.writeFieldEnd();
  }
  if (this.hitokotoBackupRequested !== null && this.hitokotoBackupRequested !== undefined) {
    output.writeFieldBegin('hitokotoBackupRequested', Thrift.Type.BOOL, 62);
    output.writeBool(this.hitokotoBackupRequested);
    output.writeFieldEnd();
  }
  if (this.agreementNearbyTime !== null && this.agreementNearbyTime !== undefined) {
    output.writeFieldBegin('agreementNearbyTime', Thrift.Type.I64, 66);
    output.writeI64(this.agreementNearbyTime);
    output.writeFieldEnd();
  }
  if (this.agreementSquareTime !== null && this.agreementSquareTime !== undefined) {
    output.writeFieldBegin('agreementSquareTime', Thrift.Type.I64, 67);
    output.writeI64(this.agreementSquareTime);
    output.writeFieldEnd();
  }
  if (this.botUseAgreementAcceptedAt !== null && this.botUseAgreementAcceptedAt !== undefined) {
    output.writeFieldBegin('botUseAgreementAcceptedAt', Thrift.Type.I64, 69);
    output.writeI64(this.botUseAgreementAcceptedAt);
    output.writeFieldEnd();
  }
  if (this.agreementShakeFunction !== null && this.agreementShakeFunction !== undefined) {
    output.writeFieldBegin('agreementShakeFunction', Thrift.Type.I64, 70);
    output.writeI64(this.agreementShakeFunction);
    output.writeFieldEnd();
  }
  if (this.agreementMobileContactName !== null && this.agreementMobileContactName !== undefined) {
    output.writeFieldBegin('agreementMobileContactName', Thrift.Type.I64, 71);
    output.writeI64(this.agreementMobileContactName);
    output.writeFieldEnd();
  }
  if (this.agreementSoundToText !== null && this.agreementSoundToText !== undefined) {
    output.writeFieldBegin('agreementSoundToText', Thrift.Type.I64, 73);
    output.writeI64(this.agreementSoundToText);
    output.writeFieldEnd();
  }
  if (this.privacyPolicyVersion !== null && this.privacyPolicyVersion !== undefined) {
    output.writeFieldBegin('privacyPolicyVersion', Thrift.Type.STRING, 74);
    output.writeString(this.privacyPolicyVersion);
    output.writeFieldEnd();
  }
  if (this.notificationEnable !== null && this.notificationEnable !== undefined) {
    output.writeFieldBegin('notificationEnable', Thrift.Type.BOOL, 10);
    output.writeBool(this.notificationEnable);
    output.writeFieldEnd();
  }
  if (this.agreementAdByWebAccess !== null && this.agreementAdByWebAccess !== undefined) {
    output.writeFieldBegin('agreementAdByWebAccess', Thrift.Type.I64, 75);
    output.writeI64(this.agreementAdByWebAccess);
    output.writeFieldEnd();
  }
  if (this.notificationMuteExpiration !== null && this.notificationMuteExpiration !== undefined) {
    output.writeFieldBegin('notificationMuteExpiration', Thrift.Type.I64, 11);
    output.writeI64(this.notificationMuteExpiration);
    output.writeFieldEnd();
  }
  if (this.agreementPhoneNumberMatching !== null && this.agreementPhoneNumberMatching !== undefined) {
    output.writeFieldBegin('agreementPhoneNumberMatching', Thrift.Type.I64, 76);
    output.writeI64(this.agreementPhoneNumberMatching);
    output.writeFieldEnd();
  }
  if (this.notificationNewMessage !== null && this.notificationNewMessage !== undefined) {
    output.writeFieldBegin('notificationNewMessage', Thrift.Type.BOOL, 12);
    output.writeBool(this.notificationNewMessage);
    output.writeFieldEnd();
  }
  if (this.agreementCommunicationInfo !== null && this.agreementCommunicationInfo !== undefined) {
    output.writeFieldBegin('agreementCommunicationInfo', Thrift.Type.I64, 77);
    output.writeI64(this.agreementCommunicationInfo);
    output.writeFieldEnd();
  }
  if (this.notificationGroupInvitation !== null && this.notificationGroupInvitation !== undefined) {
    output.writeFieldBegin('notificationGroupInvitation', Thrift.Type.BOOL, 13);
    output.writeBool(this.notificationGroupInvitation);
    output.writeFieldEnd();
  }
  if (this.agreementThingsWirelessCommunication !== null && this.agreementThingsWirelessCommunication !== undefined) {
    output.writeFieldBegin('agreementThingsWirelessCommunication', Thrift.Type.I64, 79);
    output.writeI64(this.agreementThingsWirelessCommunication);
    output.writeFieldEnd();
  }
  if (this.notificationShowMessage !== null && this.notificationShowMessage !== undefined) {
    output.writeFieldBegin('notificationShowMessage', Thrift.Type.BOOL, 14);
    output.writeBool(this.notificationShowMessage);
    output.writeFieldEnd();
  }
  if (this.agreementGdpr !== null && this.agreementGdpr !== undefined) {
    output.writeFieldBegin('agreementGdpr', Thrift.Type.I64, 80);
    output.writeI64(this.agreementGdpr);
    output.writeFieldEnd();
  }
  if (this.notificationIncomingCall !== null && this.notificationIncomingCall !== undefined) {
    output.writeFieldBegin('notificationIncomingCall', Thrift.Type.BOOL, 15);
    output.writeBool(this.notificationIncomingCall);
    output.writeFieldEnd();
  }
  if (this.agreementProvideLocation !== null && this.agreementProvideLocation !== undefined) {
    output.writeFieldBegin('agreementProvideLocation', Thrift.Type.I64, 82);
    output.writeI64(this.agreementProvideLocation);
    output.writeFieldEnd();
  }
  if (this.notificationSoundMessage !== null && this.notificationSoundMessage !== undefined) {
    output.writeFieldBegin('notificationSoundMessage', Thrift.Type.STRING, 16);
    output.writeString(this.notificationSoundMessage);
    output.writeFieldEnd();
  }
  if (this.agreementBeacon !== null && this.agreementBeacon !== undefined) {
    output.writeFieldBegin('agreementBeacon', Thrift.Type.I64, 83);
    output.writeI64(this.agreementBeacon);
    output.writeFieldEnd();
  }
  if (this.notificationSoundGroup !== null && this.notificationSoundGroup !== undefined) {
    output.writeFieldBegin('notificationSoundGroup', Thrift.Type.STRING, 17);
    output.writeString(this.notificationSoundGroup);
    output.writeFieldEnd();
  }
  if (this.agreementContentsSuggest !== null && this.agreementContentsSuggest !== undefined) {
    output.writeFieldBegin('agreementContentsSuggest', Thrift.Type.I64, 86);
    output.writeI64(this.agreementContentsSuggest);
    output.writeFieldEnd();
  }
  if (this.notificationDisabledWithSub !== null && this.notificationDisabledWithSub !== undefined) {
    output.writeFieldBegin('notificationDisabledWithSub', Thrift.Type.BOOL, 18);
    output.writeBool(this.notificationDisabledWithSub);
    output.writeFieldEnd();
  }
  if (this.agreementContentsSuggestDataCollection !== null && this.agreementContentsSuggestDataCollection !== undefined) {
    output.writeFieldBegin('agreementContentsSuggestDataCollection', Thrift.Type.I64, 87);
    output.writeI64(this.agreementContentsSuggestDataCollection);
    output.writeFieldEnd();
  }
  if (this.notificationPayment !== null && this.notificationPayment !== undefined) {
    output.writeFieldBegin('notificationPayment', Thrift.Type.BOOL, 19);
    output.writeBool(this.notificationPayment);
    output.writeFieldEnd();
  }
  if (this.agreementOcrImageCollection !== null && this.agreementOcrImageCollection !== undefined) {
    output.writeFieldBegin('agreementOcrImageCollection', Thrift.Type.I64, 90);
    output.writeI64(this.agreementOcrImageCollection);
    output.writeFieldEnd();
  }
  if (this.notificationMention !== null && this.notificationMention !== undefined) {
    output.writeFieldBegin('notificationMention', Thrift.Type.BOOL, 68);
    output.writeBool(this.notificationMention);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactRegistration = module.exports.ContactRegistration = function(args) {
  this.luid = null;
  this.contactType = null;
  this.contactKey = null;
  this.contact = null;
  if (args) {
    if (args.luid !== undefined && args.luid !== null) {
      this.luid = args.luid;
    }
    if (args.contactType !== undefined && args.contactType !== null) {
      this.contactType = args.contactType;
    }
    if (args.contactKey !== undefined && args.contactKey !== null) {
      this.contactKey = args.contactKey;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
  }
};
ContactRegistration.prototype = {};
ContactRegistration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.luid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.contactType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.contactKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactRegistration.prototype.write = function(output) {
  output.writeStructBegin('ContactRegistration');
  if (this.luid !== null && this.luid !== undefined) {
    output.writeFieldBegin('luid', Thrift.Type.STRING, 10);
    output.writeString(this.luid);
    output.writeFieldEnd();
  }
  if (this.contactType !== null && this.contactType !== undefined) {
    output.writeFieldBegin('contactType', Thrift.Type.I32, 11);
    output.writeI32(this.contactType);
    output.writeFieldEnd();
  }
  if (this.contactKey !== null && this.contactKey !== undefined) {
    output.writeFieldBegin('contactKey', Thrift.Type.STRING, 12);
    output.writeString(this.contactKey);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactModification = module.exports.ContactModification = function(args) {
  this.type = null;
  this.luid = null;
  this.phones = null;
  this.emails = null;
  this.userids = null;
  this.mobileContactName = null;
  this.phoneticName = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.luid !== undefined && args.luid !== null) {
      this.luid = args.luid;
    }
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
    if (args.userids !== undefined && args.userids !== null) {
      this.userids = Thrift.copyList(args.userids, [null]);
    }
    if (args.mobileContactName !== undefined && args.mobileContactName !== null) {
      this.mobileContactName = args.mobileContactName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
  }
};
ContactModification.prototype = {};
ContactModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.luid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        this.phones = [];
        var _rtmp392 = input.readListBegin();
        var _size91 = _rtmp392.size || 0;
        for (var _i93 = 0; _i93 < _size91; ++_i93) {
          var elem94 = null;
          elem94 = input.readString();
          this.phones.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.emails = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = input.readString();
          this.emails.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.userids = [];
        var _rtmp3100 = input.readListBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var elem102 = null;
          elem102 = input.readString();
          this.userids.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.mobileContactName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactModification.prototype.write = function(output) {
  output.writeStructBegin('ContactModification');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.luid !== null && this.luid !== undefined) {
    output.writeFieldBegin('luid', Thrift.Type.STRING, 2);
    output.writeString(this.luid);
    output.writeFieldEnd();
  }
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter103 in this.phones) {
      if (this.phones.hasOwnProperty(iter103)) {
        iter103 = this.phones[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter104 in this.emails) {
      if (this.emails.hasOwnProperty(iter104)) {
        iter104 = this.emails[iter104];
        output.writeString(iter104);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userids !== null && this.userids !== undefined) {
    output.writeFieldBegin('userids', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.userids.length);
    for (var iter105 in this.userids) {
      if (this.userids.hasOwnProperty(iter105)) {
        iter105 = this.userids[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mobileContactName !== null && this.mobileContactName !== undefined) {
    output.writeFieldBegin('mobileContactName', Thrift.Type.STRING, 14);
    output.writeString(this.mobileContactName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 15);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InviteIntoChatResponse = module.exports.InviteIntoChatResponse = function(args) {
};
InviteIntoChatResponse.prototype = {};
InviteIntoChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteIntoChatResponse.prototype.write = function(output) {
  output.writeStructBegin('InviteIntoChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InviteIntoChatRequest = module.exports.InviteIntoChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
InviteIntoChatRequest.prototype = {};
InviteIntoChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp3107 = input.readSetBegin();
        var _size106 = _rtmp3107.size || 0;
        for (var _i108 = 0; _i108 < _size106; ++_i108) {
          var elem109 = null;
          elem109 = input.readString();
          this.targetUserMids.push(elem109);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteIntoChatRequest.prototype.write = function(output) {
  output.writeStructBegin('InviteIntoChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter110 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter110)) {
        iter110 = this.targetUserMids[iter110];
        output.writeString(iter110);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteSelfFromChatResponse = module.exports.DeleteSelfFromChatResponse = function(args) {
};
DeleteSelfFromChatResponse.prototype = {};
DeleteSelfFromChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSelfFromChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteSelfFromChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteSelfFromChatRequest = module.exports.DeleteSelfFromChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.lastSeenMessageDeliveredTime = null;
  this.lastSeenMessageId = null;
  this.lastMessageDeliveredTime = null;
  this.lastMessageId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.lastSeenMessageDeliveredTime !== undefined && args.lastSeenMessageDeliveredTime !== null) {
      this.lastSeenMessageDeliveredTime = args.lastSeenMessageDeliveredTime;
    }
    if (args.lastSeenMessageId !== undefined && args.lastSeenMessageId !== null) {
      this.lastSeenMessageId = args.lastSeenMessageId;
    }
    if (args.lastMessageDeliveredTime !== undefined && args.lastMessageDeliveredTime !== null) {
      this.lastMessageDeliveredTime = args.lastMessageDeliveredTime;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
DeleteSelfFromChatRequest.prototype = {};
DeleteSelfFromChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastSeenMessageDeliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastSeenMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastMessageDeliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSelfFromChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteSelfFromChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.lastSeenMessageDeliveredTime !== null && this.lastSeenMessageDeliveredTime !== undefined) {
    output.writeFieldBegin('lastSeenMessageDeliveredTime', Thrift.Type.I64, 3);
    output.writeI64(this.lastSeenMessageDeliveredTime);
    output.writeFieldEnd();
  }
  if (this.lastSeenMessageId !== null && this.lastSeenMessageId !== undefined) {
    output.writeFieldBegin('lastSeenMessageId', Thrift.Type.STRING, 4);
    output.writeString(this.lastSeenMessageId);
    output.writeFieldEnd();
  }
  if (this.lastMessageDeliveredTime !== null && this.lastMessageDeliveredTime !== undefined) {
    output.writeFieldBegin('lastMessageDeliveredTime', Thrift.Type.I64, 5);
    output.writeI64(this.lastMessageDeliveredTime);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 6);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAllChatMidsResponse = module.exports.GetAllChatMidsResponse = function(args) {
  this.memberChatMids = null;
  this.invitedChatMids = null;
  if (args) {
    if (args.memberChatMids !== undefined && args.memberChatMids !== null) {
      this.memberChatMids = Thrift.copyList(args.memberChatMids, [null]);
    }
    if (args.invitedChatMids !== undefined && args.invitedChatMids !== null) {
      this.invitedChatMids = Thrift.copyList(args.invitedChatMids, [null]);
    }
  }
};
GetAllChatMidsResponse.prototype = {};
GetAllChatMidsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.memberChatMids = [];
        var _rtmp3112 = input.readSetBegin();
        var _size111 = _rtmp3112.size || 0;
        for (var _i113 = 0; _i113 < _size111; ++_i113) {
          var elem114 = null;
          elem114 = input.readString();
          this.memberChatMids.push(elem114);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        this.invitedChatMids = [];
        var _rtmp3116 = input.readSetBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = input.readString();
          this.invitedChatMids.push(elem118);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllChatMidsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetAllChatMidsResponse');
  if (this.memberChatMids !== null && this.memberChatMids !== undefined) {
    output.writeFieldBegin('memberChatMids', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.memberChatMids.length);
    for (var iter119 in this.memberChatMids) {
      if (this.memberChatMids.hasOwnProperty(iter119)) {
        iter119 = this.memberChatMids[iter119];
        output.writeString(iter119);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.invitedChatMids !== null && this.invitedChatMids !== undefined) {
    output.writeFieldBegin('invitedChatMids', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.invitedChatMids.length);
    for (var iter120 in this.invitedChatMids) {
      if (this.invitedChatMids.hasOwnProperty(iter120)) {
        iter120 = this.invitedChatMids[iter120];
        output.writeString(iter120);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAllChatMidsRequest = module.exports.GetAllChatMidsRequest = function(args) {
  this.withMemberChats = null;
  this.withInvitedChats = null;
  if (args) {
    if (args.withMemberChats !== undefined && args.withMemberChats !== null) {
      this.withMemberChats = args.withMemberChats;
    }
    if (args.withInvitedChats !== undefined && args.withInvitedChats !== null) {
      this.withInvitedChats = args.withInvitedChats;
    }
  }
};
GetAllChatMidsRequest.prototype = {};
GetAllChatMidsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.withMemberChats = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withInvitedChats = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllChatMidsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetAllChatMidsRequest');
  if (this.withMemberChats !== null && this.withMemberChats !== undefined) {
    output.writeFieldBegin('withMemberChats', Thrift.Type.BOOL, 1);
    output.writeBool(this.withMemberChats);
    output.writeFieldEnd();
  }
  if (this.withInvitedChats !== null && this.withInvitedChats !== undefined) {
    output.writeFieldBegin('withInvitedChats', Thrift.Type.BOOL, 2);
    output.writeBool(this.withInvitedChats);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateChatResponse = module.exports.CreateChatResponse = function(args) {
  this.chat = null;
  if (args) {
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new ttypes.Chat(args.chat);
    }
  }
};
CreateChatResponse.prototype = {};
CreateChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new ttypes.Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateChatResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateChatResponse');
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 1);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateChatRequest = module.exports.CreateChatRequest = function(args) {
  this.reqSeq = null;
  this.type = null;
  this.name = null;
  this.targetUserMids = null;
  this.picturePath = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
  }
};
CreateChatRequest.prototype = {};
CreateChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp3122 = input.readSetBegin();
        var _size121 = _rtmp3122.size || 0;
        for (var _i123 = 0; _i123 < _size121; ++_i123) {
          var elem124 = null;
          elem124 = input.readString();
          this.targetUserMids.push(elem124);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateChatRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter125 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter125)) {
        iter125 = this.targetUserMids[iter125];
        output.writeString(iter125);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 5);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcceptChatInvitationResponse = module.exports.AcceptChatInvitationResponse = function(args) {
};
AcceptChatInvitationResponse.prototype = {};
AcceptChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcceptChatInvitationRequest = module.exports.AcceptChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
AcceptChatInvitationRequest.prototype = {};
AcceptChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RejectChatInvitationResponse = module.exports.RejectChatInvitationResponse = function(args) {
};
RejectChatInvitationResponse.prototype = {};
RejectChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('RejectChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RejectChatInvitationRequest = module.exports.RejectChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
RejectChatInvitationRequest.prototype = {};
RejectChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('RejectChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteOtherFromChatResponse = module.exports.DeleteOtherFromChatResponse = function(args) {
};
DeleteOtherFromChatResponse.prototype = {};
DeleteOtherFromChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteOtherFromChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteOtherFromChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteOtherFromChatRequest = module.exports.DeleteOtherFromChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
DeleteOtherFromChatRequest.prototype = {};
DeleteOtherFromChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp3127 = input.readSetBegin();
        var _size126 = _rtmp3127.size || 0;
        for (var _i128 = 0; _i128 < _size126; ++_i128) {
          var elem129 = null;
          elem129 = input.readString();
          this.targetUserMids.push(elem129);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteOtherFromChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteOtherFromChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter130 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter130)) {
        iter130 = this.targetUserMids[iter130];
        output.writeString(iter130);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CancelChatInvitationResponse = module.exports.CancelChatInvitationResponse = function(args) {
};
CancelChatInvitationResponse.prototype = {};
CancelChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CancelChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('CancelChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CancelChatInvitationRequest = module.exports.CancelChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
CancelChatInvitationRequest.prototype = {};
CancelChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        this.targetUserMids = [];
        var _rtmp3132 = input.readSetBegin();
        var _size131 = _rtmp3132.size || 0;
        for (var _i133 = 0; _i133 < _size131; ++_i133) {
          var elem134 = null;
          elem134 = input.readString();
          this.targetUserMids.push(elem134);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CancelChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('CancelChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter135 in this.targetUserMids) {
      if (this.targetUserMids.hasOwnProperty(iter135)) {
        iter135 = this.targetUserMids[iter135];
        output.writeString(iter135);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginSession = module.exports.LoginSession = function(args) {
  this.tokenKey = null;
  this.expirationTime = null;
  this.issueTime = null;
  this.applicationType = null;
  this.systemName = null;
  this.accessLocation = null;
  if (args) {
    if (args.tokenKey !== undefined && args.tokenKey !== null) {
      this.tokenKey = args.tokenKey;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.issueTime !== undefined && args.issueTime !== null) {
      this.issueTime = args.issueTime;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
  }
};
LoginSession.prototype = {};
LoginSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tokenKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.issueTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginSession.prototype.write = function(output) {
  output.writeStructBegin('LoginSession');
  if (this.tokenKey !== null && this.tokenKey !== undefined) {
    output.writeFieldBegin('tokenKey', Thrift.Type.STRING, 1);
    output.writeString(this.tokenKey);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.issueTime !== null && this.issueTime !== undefined) {
    output.writeFieldBegin('issueTime', Thrift.Type.I64, 4);
    output.writeI64(this.issueTime);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 11);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 12);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 22);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RSAKey = module.exports.RSAKey = function(args) {
  this.keynm = null;
  this.nvalue = null;
  this.evalue = null;
  this.sessionKey = null;
  if (args) {
    if (args.keynm !== undefined && args.keynm !== null) {
      this.keynm = args.keynm;
    }
    if (args.nvalue !== undefined && args.nvalue !== null) {
      this.nvalue = args.nvalue;
    }
    if (args.evalue !== undefined && args.evalue !== null) {
      this.evalue = args.evalue;
    }
    if (args.sessionKey !== undefined && args.sessionKey !== null) {
      this.sessionKey = args.sessionKey;
    }
  }
};
RSAKey.prototype = {};
RSAKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keynm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nvalue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.evalue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RSAKey.prototype.write = function(output) {
  output.writeStructBegin('RSAKey');
  if (this.keynm !== null && this.keynm !== undefined) {
    output.writeFieldBegin('keynm', Thrift.Type.STRING, 1);
    output.writeString(this.keynm);
    output.writeFieldEnd();
  }
  if (this.nvalue !== null && this.nvalue !== undefined) {
    output.writeFieldBegin('nvalue', Thrift.Type.STRING, 2);
    output.writeString(this.nvalue);
    output.writeFieldEnd();
  }
  if (this.evalue !== null && this.evalue !== undefined) {
    output.writeFieldBegin('evalue', Thrift.Type.STRING, 3);
    output.writeString(this.evalue);
    output.writeFieldEnd();
  }
  if (this.sessionKey !== null && this.sessionKey !== undefined) {
    output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 4);
    output.writeString(this.sessionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EENegotiationResult = module.exports.E2EENegotiationResult = function(args) {
  this.allowedTypes = null;
  this.publicKey = null;
  this.specVersion = null;
  if (args) {
    if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
      this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new ttypes.E2EEPublicKey(args.publicKey);
    }
    if (args.specVersion !== undefined && args.specVersion !== null) {
      this.specVersion = args.specVersion;
    }
  }
};
E2EENegotiationResult.prototype = {};
E2EENegotiationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.SET) {
        this.allowedTypes = [];
        var _rtmp3137 = input.readSetBegin();
        var _size136 = _rtmp3137.size || 0;
        for (var _i138 = 0; _i138 < _size136; ++_i138) {
          var elem139 = null;
          elem139 = input.readI32();
          this.allowedTypes.push(elem139);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new ttypes.E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.specVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EENegotiationResult.prototype.write = function(output) {
  output.writeStructBegin('E2EENegotiationResult');
  if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
    output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
    for (var iter140 in this.allowedTypes) {
      if (this.allowedTypes.hasOwnProperty(iter140)) {
        iter140 = this.allowedTypes[iter140];
        output.writeI32(iter140);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  if (this.specVersion !== null && this.specVersion !== undefined) {
    output.writeFieldBegin('specVersion', Thrift.Type.I32, 3);
    output.writeI32(this.specVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

