//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./SecondaryQrCodeLoginService_types');
//HELPER FUNCTIONS AND STRUCTURES

var SecondaryQrCodeLoginService_createSession_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreateQrSessionRequest(args.request);
    }
  }
};
SecondaryQrCodeLoginService_createSession_args.prototype = {};
SecondaryQrCodeLoginService_createSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateQrSessionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_createSession_args.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_createSession_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_createSession_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.SecondaryQrCodeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreateQrSessionResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SecondaryQrCodeLoginService_createSession_result.prototype = {};
SecondaryQrCodeLoginService_createSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateQrSessionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.SecondaryQrCodeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_createSession_result.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_createSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_createQrCode_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreateQrCodeRequest(args.request);
    }
  }
};
SecondaryQrCodeLoginService_createQrCode_args.prototype = {};
SecondaryQrCodeLoginService_createQrCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateQrCodeRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_createQrCode_args.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_createQrCode_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_createQrCode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.SecondaryQrCodeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreateQrCodeResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SecondaryQrCodeLoginService_createQrCode_result.prototype = {};
SecondaryQrCodeLoginService_createQrCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateQrCodeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.SecondaryQrCodeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_createQrCode_result.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_createQrCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_createPinCode_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreatePinCodeRequest(args.request);
    }
  }
};
SecondaryQrCodeLoginService_createPinCode_args.prototype = {};
SecondaryQrCodeLoginService_createPinCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreatePinCodeRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_createPinCode_args.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_createPinCode_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_createPinCode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.SecondaryQrCodeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreatePinCodeResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SecondaryQrCodeLoginService_createPinCode_result.prototype = {};
SecondaryQrCodeLoginService_createPinCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreatePinCodeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.SecondaryQrCodeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_createPinCode_result.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_createPinCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_verifyCertificate_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.VerifyCertificateRequest(args.request);
    }
  }
};
SecondaryQrCodeLoginService_verifyCertificate_args.prototype = {};
SecondaryQrCodeLoginService_verifyCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.VerifyCertificateRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_verifyCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_verifyCertificate_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_verifyCertificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.SecondaryQrCodeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerifyCertificateResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SecondaryQrCodeLoginService_verifyCertificate_result.prototype = {};
SecondaryQrCodeLoginService_verifyCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerifyCertificateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.SecondaryQrCodeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_verifyCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_verifyCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_qrCodeLogin_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.QrCodeLoginRequest(args.request);
    }
  }
};
SecondaryQrCodeLoginService_qrCodeLogin_args.prototype = {};
SecondaryQrCodeLoginService_qrCodeLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.QrCodeLoginRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_qrCodeLogin_args.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_qrCodeLogin_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginService_qrCodeLogin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.SecondaryQrCodeException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.QrCodeLoginResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
SecondaryQrCodeLoginService_qrCodeLogin_result.prototype = {};
SecondaryQrCodeLoginService_qrCodeLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.QrCodeLoginResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.SecondaryQrCodeException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeLoginService_qrCodeLogin_result.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeLoginService_qrCodeLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecondaryQrCodeLoginServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
SecondaryQrCodeLoginServiceClient.prototype = {};
SecondaryQrCodeLoginServiceClient.prototype.seqid = function() { return this._seqid; };
SecondaryQrCodeLoginServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

SecondaryQrCodeLoginServiceClient.prototype.createSession = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createSession(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createSession(request);
  }
};

SecondaryQrCodeLoginServiceClient.prototype.send_createSession = function(request) {
  var output = new this.pClass(this.output);
  var params = {
    request: request
  };
  var args = new SecondaryQrCodeLoginService_createSession_args(params);
  try {
    output.writeMessageBegin('createSession', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SecondaryQrCodeLoginServiceClient.prototype.recv_createSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SecondaryQrCodeLoginService_createSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createSession failed: unknown result');
};

SecondaryQrCodeLoginServiceClient.prototype.createQrCode = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createQrCode(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createQrCode(request);
  }
};

SecondaryQrCodeLoginServiceClient.prototype.send_createQrCode = function(request) {
  var output = new this.pClass(this.output);
  var params = {
    request: request
  };
  var args = new SecondaryQrCodeLoginService_createQrCode_args(params);
  try {
    output.writeMessageBegin('createQrCode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SecondaryQrCodeLoginServiceClient.prototype.recv_createQrCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SecondaryQrCodeLoginService_createQrCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createQrCode failed: unknown result');
};

SecondaryQrCodeLoginServiceClient.prototype.createPinCode = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createPinCode(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createPinCode(request);
  }
};

SecondaryQrCodeLoginServiceClient.prototype.send_createPinCode = function(request) {
  var output = new this.pClass(this.output);
  var params = {
    request: request
  };
  var args = new SecondaryQrCodeLoginService_createPinCode_args(params);
  try {
    output.writeMessageBegin('createPinCode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SecondaryQrCodeLoginServiceClient.prototype.recv_createPinCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SecondaryQrCodeLoginService_createPinCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createPinCode failed: unknown result');
};

SecondaryQrCodeLoginServiceClient.prototype.verifyCertificate = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyCertificate(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyCertificate(request);
  }
};

SecondaryQrCodeLoginServiceClient.prototype.send_verifyCertificate = function(request) {
  var output = new this.pClass(this.output);
  var params = {
    request: request
  };
  var args = new SecondaryQrCodeLoginService_verifyCertificate_args(params);
  try {
    output.writeMessageBegin('verifyCertificate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SecondaryQrCodeLoginServiceClient.prototype.recv_verifyCertificate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SecondaryQrCodeLoginService_verifyCertificate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyCertificate failed: unknown result');
};

SecondaryQrCodeLoginServiceClient.prototype.qrCodeLogin = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_qrCodeLogin(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_qrCodeLogin(request);
  }
};

SecondaryQrCodeLoginServiceClient.prototype.send_qrCodeLogin = function(request) {
  var output = new this.pClass(this.output);
  var params = {
    request: request
  };
  var args = new SecondaryQrCodeLoginService_qrCodeLogin_args(params);
  try {
    output.writeMessageBegin('qrCodeLogin', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SecondaryQrCodeLoginServiceClient.prototype.recv_qrCodeLogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SecondaryQrCodeLoginService_qrCodeLogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('qrCodeLogin failed: unknown result');
};
var SecondaryQrCodeLoginServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
SecondaryQrCodeLoginServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
SecondaryQrCodeLoginServiceProcessor.prototype.process_createSession = function(seqid, input, output) {
  var args = new SecondaryQrCodeLoginService_createSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createSession.length === 1) {
    Q.fcall(this._handler.createSession.bind(this._handler),
      args.request
    ).then(function(result) {
      var result_obj = new SecondaryQrCodeLoginService_createSession_result({success: result});
      output.writeMessageBegin("createSession", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.SecondaryQrCodeException) {
        result = new SecondaryQrCodeLoginService_createSession_result(err);
        output.writeMessageBegin("createSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createSession(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SecondaryQrCodeException) {
        result_obj = new SecondaryQrCodeLoginService_createSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SecondaryQrCodeLoginServiceProcessor.prototype.process_createQrCode = function(seqid, input, output) {
  var args = new SecondaryQrCodeLoginService_createQrCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createQrCode.length === 1) {
    Q.fcall(this._handler.createQrCode.bind(this._handler),
      args.request
    ).then(function(result) {
      var result_obj = new SecondaryQrCodeLoginService_createQrCode_result({success: result});
      output.writeMessageBegin("createQrCode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.SecondaryQrCodeException) {
        result = new SecondaryQrCodeLoginService_createQrCode_result(err);
        output.writeMessageBegin("createQrCode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createQrCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createQrCode(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SecondaryQrCodeException) {
        result_obj = new SecondaryQrCodeLoginService_createQrCode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createQrCode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createQrCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SecondaryQrCodeLoginServiceProcessor.prototype.process_createPinCode = function(seqid, input, output) {
  var args = new SecondaryQrCodeLoginService_createPinCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createPinCode.length === 1) {
    Q.fcall(this._handler.createPinCode.bind(this._handler),
      args.request
    ).then(function(result) {
      var result_obj = new SecondaryQrCodeLoginService_createPinCode_result({success: result});
      output.writeMessageBegin("createPinCode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.SecondaryQrCodeException) {
        result = new SecondaryQrCodeLoginService_createPinCode_result(err);
        output.writeMessageBegin("createPinCode", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createPinCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createPinCode(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SecondaryQrCodeException) {
        result_obj = new SecondaryQrCodeLoginService_createPinCode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createPinCode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createPinCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SecondaryQrCodeLoginServiceProcessor.prototype.process_verifyCertificate = function(seqid, input, output) {
  var args = new SecondaryQrCodeLoginService_verifyCertificate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyCertificate.length === 1) {
    Q.fcall(this._handler.verifyCertificate.bind(this._handler),
      args.request
    ).then(function(result) {
      var result_obj = new SecondaryQrCodeLoginService_verifyCertificate_result({success: result});
      output.writeMessageBegin("verifyCertificate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.SecondaryQrCodeException) {
        result = new SecondaryQrCodeLoginService_verifyCertificate_result(err);
        output.writeMessageBegin("verifyCertificate", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyCertificate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verifyCertificate(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SecondaryQrCodeException) {
        result_obj = new SecondaryQrCodeLoginService_verifyCertificate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyCertificate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyCertificate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SecondaryQrCodeLoginServiceProcessor.prototype.process_qrCodeLogin = function(seqid, input, output) {
  var args = new SecondaryQrCodeLoginService_qrCodeLogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.qrCodeLogin.length === 1) {
    Q.fcall(this._handler.qrCodeLogin.bind(this._handler),
      args.request
    ).then(function(result) {
      var result_obj = new SecondaryQrCodeLoginService_qrCodeLogin_result({success: result});
      output.writeMessageBegin("qrCodeLogin", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.SecondaryQrCodeException) {
        result = new SecondaryQrCodeLoginService_qrCodeLogin_result(err);
        output.writeMessageBegin("qrCodeLogin", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("qrCodeLogin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.qrCodeLogin(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SecondaryQrCodeException) {
        result_obj = new SecondaryQrCodeLoginService_qrCodeLogin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("qrCodeLogin", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("qrCodeLogin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
