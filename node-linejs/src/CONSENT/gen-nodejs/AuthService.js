//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var TalkService_ttypes = require('./TalkService_types');


var ttypes = require('./AuthService_types');
//HELPER FUNCTIONS AND STRUCTURES

var AuthService_loginZ_args = function(args) {
  this.loginRequest = null;
  if (args) {
    if (args.loginRequest !== undefined && args.loginRequest !== null) {
      this.loginRequest = new ttypes.LoginRequest(args.loginRequest);
    }
  }
};
AuthService_loginZ_args.prototype = {};
AuthService_loginZ_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loginRequest = new ttypes.LoginRequest();
        this.loginRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_loginZ_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_loginZ_args');
  if (this.loginRequest !== null && this.loginRequest !== undefined) {
    output.writeFieldBegin('loginRequest', Thrift.Type.STRUCT, 2);
    this.loginRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_loginZ_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_loginZ_result.prototype = {};
AuthService_loginZ_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_loginZ_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_loginZ_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_confirmE2EELogin_args = function(args) {
  this.verifier = null;
  this.deviceSecret = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.deviceSecret !== undefined && args.deviceSecret !== null) {
      this.deviceSecret = args.deviceSecret;
    }
  }
};
AuthService_confirmE2EELogin_args.prototype = {};
AuthService_confirmE2EELogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deviceSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_confirmE2EELogin_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_confirmE2EELogin_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.deviceSecret !== null && this.deviceSecret !== undefined) {
    output.writeFieldBegin('deviceSecret', Thrift.Type.STRING, 2);
    output.writeString(this.deviceSecret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_confirmE2EELogin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_confirmE2EELogin_result.prototype = {};
AuthService_confirmE2EELogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_confirmE2EELogin_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_confirmE2EELogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_respondE2EELoginRequest_args = function(args) {
  this.verifier = null;
  this.publicKey = null;
  this.encryptedKeyChain = null;
  this.hashKeyChain = null;
  this.errorCode = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new TalkService_ttypes.E2EEPublicKey(args.publicKey);
    }
    if (args.encryptedKeyChain !== undefined && args.encryptedKeyChain !== null) {
      this.encryptedKeyChain = args.encryptedKeyChain;
    }
    if (args.hashKeyChain !== undefined && args.hashKeyChain !== null) {
      this.hashKeyChain = args.hashKeyChain;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
  }
};
AuthService_respondE2EELoginRequest_args.prototype = {};
AuthService_respondE2EELoginRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new TalkService_ttypes.E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedKeyChain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hashKeyChain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_respondE2EELoginRequest_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_respondE2EELoginRequest_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  if (this.encryptedKeyChain !== null && this.encryptedKeyChain !== undefined) {
    output.writeFieldBegin('encryptedKeyChain', Thrift.Type.STRING, 3);
    output.writeString(this.encryptedKeyChain);
    output.writeFieldEnd();
  }
  if (this.hashKeyChain !== null && this.hashKeyChain !== undefined) {
    output.writeFieldBegin('hashKeyChain', Thrift.Type.STRING, 4);
    output.writeString(this.hashKeyChain);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 5);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_respondE2EELoginRequest_result = function(args) {
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_respondE2EELoginRequest_result.prototype = {};
AuthService_respondE2EELoginRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_respondE2EELoginRequest_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_respondE2EELoginRequest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_openAuthSession_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AuthSessionRequest(args.request);
    }
  }
};
AuthService_openAuthSession_args.prototype = {};
AuthService_openAuthSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AuthSessionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_openAuthSession_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_openAuthSession_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_openAuthSession_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_openAuthSession_result.prototype = {};
AuthService_openAuthSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_openAuthSession_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_openAuthSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_updatePassword_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_updatePassword_args.prototype = {};
AuthService_updatePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_updatePassword_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_updatePassword_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_updatePassword_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_updatePassword_result.prototype = {};
AuthService_updatePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_updatePassword_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_updatePassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_logoutZ_args = function(args) {
};
AuthService_logoutZ_args.prototype = {};
AuthService_logoutZ_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_logoutZ_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_logoutZ_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_logoutZ_result = function(args) {
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_logoutZ_result.prototype = {};
AuthService_logoutZ_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_logoutZ_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_logoutZ_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_verifyQrcodeWithE2EE_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  this.errorCode = null;
  this.publicKey = null;
  this.encryptedKeyChain = null;
  this.hashKeyChain = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new TalkService_ttypes.E2EEPublicKey(args.publicKey);
    }
    if (args.encryptedKeyChain !== undefined && args.encryptedKeyChain !== null) {
      this.encryptedKeyChain = args.encryptedKeyChain;
    }
    if (args.hashKeyChain !== undefined && args.hashKeyChain !== null) {
      this.hashKeyChain = args.hashKeyChain;
    }
  }
};
AuthService_verifyQrcodeWithE2EE_args.prototype = {};
AuthService_verifyQrcodeWithE2EE_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new TalkService_ttypes.E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedKeyChain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.hashKeyChain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_verifyQrcodeWithE2EE_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_verifyQrcodeWithE2EE_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 5);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  if (this.encryptedKeyChain !== null && this.encryptedKeyChain !== undefined) {
    output.writeFieldBegin('encryptedKeyChain', Thrift.Type.STRING, 6);
    output.writeString(this.encryptedKeyChain);
    output.writeFieldEnd();
  }
  if (this.hashKeyChain !== null && this.hashKeyChain !== undefined) {
    output.writeFieldBegin('hashKeyChain', Thrift.Type.STRING, 7);
    output.writeString(this.hashKeyChain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_verifyQrcodeWithE2EE_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_verifyQrcodeWithE2EE_result.prototype = {};
AuthService_verifyQrcodeWithE2EE_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_verifyQrcodeWithE2EE_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_verifyQrcodeWithE2EE_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_getAuthRSAKey_args = function(args) {
  this.authSessionId = null;
  this.identityProvider = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
  }
};
AuthService_getAuthRSAKey_args.prototype = {};
AuthService_getAuthRSAKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_getAuthRSAKey_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_getAuthRSAKey_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 3);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_getAuthRSAKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TalkService_ttypes.RSAKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_getAuthRSAKey_result.prototype = {};
AuthService_getAuthRSAKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TalkService_ttypes.RSAKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_getAuthRSAKey_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_getAuthRSAKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_issueTokenForAccountMigrationSettings_args = function(args) {
  this.enforce = null;
  if (args) {
    if (args.enforce !== undefined && args.enforce !== null) {
      this.enforce = args.enforce;
    }
  }
};
AuthService_issueTokenForAccountMigrationSettings_args.prototype = {};
AuthService_issueTokenForAccountMigrationSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enforce = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_issueTokenForAccountMigrationSettings_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_issueTokenForAccountMigrationSettings_args');
  if (this.enforce !== null && this.enforce !== undefined) {
    output.writeFieldBegin('enforce', Thrift.Type.BOOL, 2);
    output.writeBool(this.enforce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_issueTokenForAccountMigrationSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SecurityCenterResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_issueTokenForAccountMigrationSettings_result.prototype = {};
AuthService_issueTokenForAccountMigrationSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SecurityCenterResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_issueTokenForAccountMigrationSettings_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_issueTokenForAccountMigrationSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_setPassword_args = function(args) {
  this.authSessionId = null;
  this.encryptedPassword = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.encryptedPassword !== undefined && args.encryptedPassword !== null) {
      this.encryptedPassword = new ttypes.EncryptedPassword(args.encryptedPassword);
    }
  }
};
AuthService_setPassword_args.prototype = {};
AuthService_setPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.encryptedPassword = new ttypes.EncryptedPassword();
        this.encryptedPassword.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_setPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_setPassword_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.encryptedPassword !== null && this.encryptedPassword !== undefined) {
    output.writeFieldBegin('encryptedPassword', Thrift.Type.STRUCT, 2);
    this.encryptedPassword.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_setPassword_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SetPasswordResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_setPassword_result.prototype = {};
AuthService_setPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SetPasswordResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_setPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_setPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_confirmIdentifier_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_confirmIdentifier_args.prototype = {};
AuthService_confirmIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_confirmIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_confirmIdentifier_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_confirmIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_confirmIdentifier_result.prototype = {};
AuthService_confirmIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_confirmIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_confirmIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_setIdentifier_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_setIdentifier_args.prototype = {};
AuthService_setIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_setIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_setIdentifier_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_setIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_setIdentifier_result.prototype = {};
AuthService_setIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_setIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_setIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_setIdentifierAndPassword_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_setIdentifierAndPassword_args.prototype = {};
AuthService_setIdentifierAndPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_setIdentifierAndPassword_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_setIdentifierAndPassword_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_setIdentifierAndPassword_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_setIdentifierAndPassword_result.prototype = {};
AuthService_setIdentifierAndPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_setIdentifierAndPassword_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_setIdentifierAndPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_updateIdentifier_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_updateIdentifier_args.prototype = {};
AuthService_updateIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_updateIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_updateIdentifier_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_updateIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_updateIdentifier_result.prototype = {};
AuthService_updateIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_updateIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_updateIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_resendIdentifierConfirmation_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_resendIdentifierConfirmation_args.prototype = {};
AuthService_resendIdentifierConfirmation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_resendIdentifierConfirmation_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_resendIdentifierConfirmation_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_resendIdentifierConfirmation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_resendIdentifierConfirmation_result.prototype = {};
AuthService_resendIdentifierConfirmation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_resendIdentifierConfirmation_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_resendIdentifierConfirmation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_removeIdentifier_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
AuthService_removeIdentifier_args.prototype = {};
AuthService_removeIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_removeIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('AuthService_removeIdentifier_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthService_removeIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TalkService_ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
AuthService_removeIdentifier_result.prototype = {};
AuthService_removeIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TalkService_ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthService_removeIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('AuthService_removeIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
AuthServiceClient.prototype = {};
AuthServiceClient.prototype.seqid = function() { return this._seqid; };
AuthServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

AuthServiceClient.prototype.loginZ = function(loginRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginZ(loginRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginZ(loginRequest);
  }
};

AuthServiceClient.prototype.send_loginZ = function(loginRequest) {
  var output = new this.pClass(this.output);
  var params = {
    loginRequest: loginRequest
  };
  var args = new AuthService_loginZ_args(params);
  try {
    output.writeMessageBegin('loginZ', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_loginZ = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_loginZ_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginZ failed: unknown result');
};

AuthServiceClient.prototype.confirmE2EELogin = function(verifier, deviceSecret, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirmE2EELogin(verifier, deviceSecret);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirmE2EELogin(verifier, deviceSecret);
  }
};

AuthServiceClient.prototype.send_confirmE2EELogin = function(verifier, deviceSecret) {
  var output = new this.pClass(this.output);
  var params = {
    verifier: verifier,
    deviceSecret: deviceSecret
  };
  var args = new AuthService_confirmE2EELogin_args(params);
  try {
    output.writeMessageBegin('confirmE2EELogin', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_confirmE2EELogin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_confirmE2EELogin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirmE2EELogin failed: unknown result');
};

AuthServiceClient.prototype.respondE2EELoginRequest = function(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
  }
};

AuthServiceClient.prototype.send_respondE2EELoginRequest = function(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode) {
  var output = new this.pClass(this.output);
  var params = {
    verifier: verifier,
    publicKey: publicKey,
    encryptedKeyChain: encryptedKeyChain,
    hashKeyChain: hashKeyChain,
    errorCode: errorCode
  };
  var args = new AuthService_respondE2EELoginRequest_args(params);
  try {
    output.writeMessageBegin('respondE2EELoginRequest', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_respondE2EELoginRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_respondE2EELoginRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

AuthServiceClient.prototype.openAuthSession = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_openAuthSession(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_openAuthSession(request);
  }
};

AuthServiceClient.prototype.send_openAuthSession = function(request) {
  var output = new this.pClass(this.output);
  var params = {
    request: request
  };
  var args = new AuthService_openAuthSession_args(params);
  try {
    output.writeMessageBegin('openAuthSession', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_openAuthSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_openAuthSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('openAuthSession failed: unknown result');
};

AuthServiceClient.prototype.updatePassword = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updatePassword(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updatePassword(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_updatePassword = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_updatePassword_args(params);
  try {
    output.writeMessageBegin('updatePassword', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_updatePassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_updatePassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updatePassword failed: unknown result');
};

AuthServiceClient.prototype.logoutZ = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logoutZ();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logoutZ();
  }
};

AuthServiceClient.prototype.send_logoutZ = function() {
  var output = new this.pClass(this.output);
  var args = new AuthService_logoutZ_args();
  try {
    output.writeMessageBegin('logoutZ', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_logoutZ = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_logoutZ_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

AuthServiceClient.prototype.verifyQrcodeWithE2EE = function(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
  }
};

AuthServiceClient.prototype.send_verifyQrcodeWithE2EE = function(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain) {
  var output = new this.pClass(this.output);
  var params = {
    verifier: verifier,
    pinCode: pinCode,
    errorCode: errorCode,
    publicKey: publicKey,
    encryptedKeyChain: encryptedKeyChain,
    hashKeyChain: hashKeyChain
  };
  var args = new AuthService_verifyQrcodeWithE2EE_args(params);
  try {
    output.writeMessageBegin('verifyQrcodeWithE2EE', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_verifyQrcodeWithE2EE = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_verifyQrcodeWithE2EE_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyQrcodeWithE2EE failed: unknown result');
};

AuthServiceClient.prototype.getAuthRSAKey = function(authSessionId, identityProvider, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAuthRSAKey(authSessionId, identityProvider);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAuthRSAKey(authSessionId, identityProvider);
  }
};

AuthServiceClient.prototype.send_getAuthRSAKey = function(authSessionId, identityProvider) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    identityProvider: identityProvider
  };
  var args = new AuthService_getAuthRSAKey_args(params);
  try {
    output.writeMessageBegin('getAuthRSAKey', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_getAuthRSAKey = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_getAuthRSAKey_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAuthRSAKey failed: unknown result');
};

AuthServiceClient.prototype.issueTokenForAccountMigrationSettings = function(enforce, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueTokenForAccountMigrationSettings(enforce);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueTokenForAccountMigrationSettings(enforce);
  }
};

AuthServiceClient.prototype.send_issueTokenForAccountMigrationSettings = function(enforce) {
  var output = new this.pClass(this.output);
  var params = {
    enforce: enforce
  };
  var args = new AuthService_issueTokenForAccountMigrationSettings_args(params);
  try {
    output.writeMessageBegin('issueTokenForAccountMigrationSettings', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_issueTokenForAccountMigrationSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_issueTokenForAccountMigrationSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueTokenForAccountMigrationSettings failed: unknown result');
};

AuthServiceClient.prototype.setPassword = function(authSessionId, encryptedPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPassword(authSessionId, encryptedPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPassword(authSessionId, encryptedPassword);
  }
};

AuthServiceClient.prototype.send_setPassword = function(authSessionId, encryptedPassword) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    encryptedPassword: encryptedPassword
  };
  var args = new AuthService_setPassword_args(params);
  try {
    output.writeMessageBegin('setPassword', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_setPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_setPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setPassword failed: unknown result');
};

AuthServiceClient.prototype.confirmIdentifier = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirmIdentifier(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirmIdentifier(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_confirmIdentifier = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_confirmIdentifier_args(params);
  try {
    output.writeMessageBegin('confirmIdentifier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_confirmIdentifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_confirmIdentifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirmIdentifier failed: unknown result');
};

AuthServiceClient.prototype.setIdentifier = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setIdentifier(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setIdentifier(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_setIdentifier = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_setIdentifier_args(params);
  try {
    output.writeMessageBegin('setIdentifier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_setIdentifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_setIdentifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setIdentifier failed: unknown result');
};

AuthServiceClient.prototype.setIdentifierAndPassword = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setIdentifierAndPassword(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setIdentifierAndPassword(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_setIdentifierAndPassword = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_setIdentifierAndPassword_args(params);
  try {
    output.writeMessageBegin('setIdentifierAndPassword', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_setIdentifierAndPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_setIdentifierAndPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setIdentifierAndPassword failed: unknown result');
};

AuthServiceClient.prototype.updateIdentifier = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateIdentifier(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateIdentifier(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_updateIdentifier = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_updateIdentifier_args(params);
  try {
    output.writeMessageBegin('updateIdentifier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_updateIdentifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_updateIdentifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateIdentifier failed: unknown result');
};

AuthServiceClient.prototype.resendIdentifierConfirmation = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resendIdentifierConfirmation(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resendIdentifierConfirmation(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_resendIdentifierConfirmation = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_resendIdentifierConfirmation_args(params);
  try {
    output.writeMessageBegin('resendIdentifierConfirmation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_resendIdentifierConfirmation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_resendIdentifierConfirmation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resendIdentifierConfirmation failed: unknown result');
};

AuthServiceClient.prototype.removeIdentifier = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeIdentifier(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeIdentifier(authSessionId, request);
  }
};

AuthServiceClient.prototype.send_removeIdentifier = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new AuthService_removeIdentifier_args(params);
  try {
    output.writeMessageBegin('removeIdentifier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

AuthServiceClient.prototype.recv_removeIdentifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AuthService_removeIdentifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeIdentifier failed: unknown result');
};
var AuthServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
AuthServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
AuthServiceProcessor.prototype.process_loginZ = function(seqid, input, output) {
  var args = new AuthService_loginZ_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginZ.length === 1) {
    Q.fcall(this._handler.loginZ.bind(this._handler),
      args.loginRequest
    ).then(function(result) {
      var result_obj = new AuthService_loginZ_result({success: result});
      output.writeMessageBegin("loginZ", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_loginZ_result(err);
        output.writeMessageBegin("loginZ", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginZ", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.loginZ(args.loginRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_loginZ_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loginZ", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginZ", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_confirmE2EELogin = function(seqid, input, output) {
  var args = new AuthService_confirmE2EELogin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirmE2EELogin.length === 2) {
    Q.fcall(this._handler.confirmE2EELogin.bind(this._handler),
      args.verifier,
      args.deviceSecret
    ).then(function(result) {
      var result_obj = new AuthService_confirmE2EELogin_result({success: result});
      output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_confirmE2EELogin_result(err);
        output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.confirmE2EELogin(args.verifier, args.deviceSecret, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_confirmE2EELogin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_respondE2EELoginRequest = function(seqid, input, output) {
  var args = new AuthService_respondE2EELoginRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.respondE2EELoginRequest.length === 5) {
    Q.fcall(this._handler.respondE2EELoginRequest.bind(this._handler),
      args.verifier,
      args.publicKey,
      args.encryptedKeyChain,
      args.hashKeyChain,
      args.errorCode
    ).then(function(result) {
      var result_obj = new AuthService_respondE2EELoginRequest_result({success: result});
      output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_respondE2EELoginRequest_result(err);
        output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_respondE2EELoginRequest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_openAuthSession = function(seqid, input, output) {
  var args = new AuthService_openAuthSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.openAuthSession.length === 1) {
    Q.fcall(this._handler.openAuthSession.bind(this._handler),
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_openAuthSession_result({success: result});
      output.writeMessageBegin("openAuthSession", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_openAuthSession_result(err);
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.openAuthSession(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_openAuthSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_updatePassword = function(seqid, input, output) {
  var args = new AuthService_updatePassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updatePassword.length === 2) {
    Q.fcall(this._handler.updatePassword.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_updatePassword_result({success: result});
      output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_updatePassword_result(err);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updatePassword(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_updatePassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_logoutZ = function(seqid, input, output) {
  var args = new AuthService_logoutZ_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logoutZ.length === 0) {
    Q.fcall(this._handler.logoutZ.bind(this._handler)
    ).then(function(result) {
      var result_obj = new AuthService_logoutZ_result({success: result});
      output.writeMessageBegin("logoutZ", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_logoutZ_result(err);
        output.writeMessageBegin("logoutZ", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logoutZ", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.logoutZ(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_logoutZ_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("logoutZ", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logoutZ", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_verifyQrcodeWithE2EE = function(seqid, input, output) {
  var args = new AuthService_verifyQrcodeWithE2EE_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyQrcodeWithE2EE.length === 6) {
    Q.fcall(this._handler.verifyQrcodeWithE2EE.bind(this._handler),
      args.verifier,
      args.pinCode,
      args.errorCode,
      args.publicKey,
      args.encryptedKeyChain,
      args.hashKeyChain
    ).then(function(result) {
      var result_obj = new AuthService_verifyQrcodeWithE2EE_result({success: result});
      output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_verifyQrcodeWithE2EE_result(err);
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_verifyQrcodeWithE2EE_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_getAuthRSAKey = function(seqid, input, output) {
  var args = new AuthService_getAuthRSAKey_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAuthRSAKey.length === 2) {
    Q.fcall(this._handler.getAuthRSAKey.bind(this._handler),
      args.authSessionId,
      args.identityProvider
    ).then(function(result) {
      var result_obj = new AuthService_getAuthRSAKey_result({success: result});
      output.writeMessageBegin("getAuthRSAKey", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_getAuthRSAKey_result(err);
        output.writeMessageBegin("getAuthRSAKey", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAuthRSAKey", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAuthRSAKey(args.authSessionId, args.identityProvider, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_getAuthRSAKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAuthRSAKey", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAuthRSAKey", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_issueTokenForAccountMigrationSettings = function(seqid, input, output) {
  var args = new AuthService_issueTokenForAccountMigrationSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueTokenForAccountMigrationSettings.length === 1) {
    Q.fcall(this._handler.issueTokenForAccountMigrationSettings.bind(this._handler),
      args.enforce
    ).then(function(result) {
      var result_obj = new AuthService_issueTokenForAccountMigrationSettings_result({success: result});
      output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_issueTokenForAccountMigrationSettings_result(err);
        output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueTokenForAccountMigrationSettings(args.enforce, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_issueTokenForAccountMigrationSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_setPassword = function(seqid, input, output) {
  var args = new AuthService_setPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPassword.length === 2) {
    Q.fcall(this._handler.setPassword.bind(this._handler),
      args.authSessionId,
      args.encryptedPassword
    ).then(function(result) {
      var result_obj = new AuthService_setPassword_result({success: result});
      output.writeMessageBegin("setPassword", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_setPassword_result(err);
        output.writeMessageBegin("setPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setPassword(args.authSessionId, args.encryptedPassword, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_setPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_confirmIdentifier = function(seqid, input, output) {
  var args = new AuthService_confirmIdentifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirmIdentifier.length === 2) {
    Q.fcall(this._handler.confirmIdentifier.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_confirmIdentifier_result({success: result});
      output.writeMessageBegin("confirmIdentifier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_confirmIdentifier_result(err);
        output.writeMessageBegin("confirmIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirmIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.confirmIdentifier(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_confirmIdentifier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("confirmIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirmIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_setIdentifier = function(seqid, input, output) {
  var args = new AuthService_setIdentifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setIdentifier.length === 2) {
    Q.fcall(this._handler.setIdentifier.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_setIdentifier_result({success: result});
      output.writeMessageBegin("setIdentifier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_setIdentifier_result(err);
        output.writeMessageBegin("setIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setIdentifier(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_setIdentifier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_setIdentifierAndPassword = function(seqid, input, output) {
  var args = new AuthService_setIdentifierAndPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setIdentifierAndPassword.length === 2) {
    Q.fcall(this._handler.setIdentifierAndPassword.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_setIdentifierAndPassword_result({success: result});
      output.writeMessageBegin("setIdentifierAndPassword", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_setIdentifierAndPassword_result(err);
        output.writeMessageBegin("setIdentifierAndPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setIdentifierAndPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setIdentifierAndPassword(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_setIdentifierAndPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setIdentifierAndPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setIdentifierAndPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_updateIdentifier = function(seqid, input, output) {
  var args = new AuthService_updateIdentifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateIdentifier.length === 2) {
    Q.fcall(this._handler.updateIdentifier.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_updateIdentifier_result({success: result});
      output.writeMessageBegin("updateIdentifier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_updateIdentifier_result(err);
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateIdentifier(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_updateIdentifier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_resendIdentifierConfirmation = function(seqid, input, output) {
  var args = new AuthService_resendIdentifierConfirmation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resendIdentifierConfirmation.length === 2) {
    Q.fcall(this._handler.resendIdentifierConfirmation.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_resendIdentifierConfirmation_result({success: result});
      output.writeMessageBegin("resendIdentifierConfirmation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_resendIdentifierConfirmation_result(err);
        output.writeMessageBegin("resendIdentifierConfirmation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resendIdentifierConfirmation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.resendIdentifierConfirmation(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_resendIdentifierConfirmation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("resendIdentifierConfirmation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resendIdentifierConfirmation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AuthServiceProcessor.prototype.process_removeIdentifier = function(seqid, input, output) {
  var args = new AuthService_removeIdentifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeIdentifier.length === 2) {
    Q.fcall(this._handler.removeIdentifier.bind(this._handler),
      args.authSessionId,
      args.request
    ).then(function(result) {
      var result_obj = new AuthService_removeIdentifier_result({success: result});
      output.writeMessageBegin("removeIdentifier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof TalkService_ttypes.TalkException) {
        result = new AuthService_removeIdentifier_result(err);
        output.writeMessageBegin("removeIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeIdentifier(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof TalkService_ttypes.TalkException) {
        result_obj = new AuthService_removeIdentifier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
