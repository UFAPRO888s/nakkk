//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.ErrorCode = {
  'INTERNAL_ERROR' : 0,
  'ILLEGAL_ARGUMENT' : 1,
  'VERIFICATION_FAILED' : 2,
  'NOT_ALLOWED_QR_CODE_LOGIN' : 3,
  'VERIFICATION_NOTICE_FAILED' : 4,
  'RETRY_LATER' : 5,
  'INVALID_CONTEXT' : 100,
  'APP_UPGRADE_REQUIRED' : 101
};
var SecondaryQrCodeException = module.exports.SecondaryQrCodeException = function(args) {
  Thrift.TException.call(this, "SecondaryQrCodeException");
  this.name = "SecondaryQrCodeException";
  this.code = null;
  this.alertMessage = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.alertMessage !== undefined && args.alertMessage !== null) {
      this.alertMessage = args.alertMessage;
    }
  }
};
Thrift.inherits(SecondaryQrCodeException, Thrift.TException);
SecondaryQrCodeException.prototype.name = 'SecondaryQrCodeException';
SecondaryQrCodeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.alertMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecondaryQrCodeException.prototype.write = function(output) {
  output.writeStructBegin('SecondaryQrCodeException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.alertMessage !== null && this.alertMessage !== undefined) {
    output.writeFieldBegin('alertMessage', Thrift.Type.STRING, 2);
    output.writeString(this.alertMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateQrSessionResponse = module.exports.CreateQrSessionResponse = function(args) {
  this.authSessionId = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
  }
};
CreateQrSessionResponse.prototype = {};
CreateQrSessionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQrSessionResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateQrSessionResponse');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateQrSessionRequest = module.exports.CreateQrSessionRequest = function(args) {
};
CreateQrSessionRequest.prototype = {};
CreateQrSessionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQrSessionRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateQrSessionRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateQrCodeResponse = module.exports.CreateQrCodeResponse = function(args) {
  this.callbackUrl = null;
  if (args) {
    if (args.callbackUrl !== undefined && args.callbackUrl !== null) {
      this.callbackUrl = args.callbackUrl;
    }
  }
};
CreateQrCodeResponse.prototype = {};
CreateQrCodeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.callbackUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQrCodeResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateQrCodeResponse');
  if (this.callbackUrl !== null && this.callbackUrl !== undefined) {
    output.writeFieldBegin('callbackUrl', Thrift.Type.STRING, 1);
    output.writeString(this.callbackUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateQrCodeRequest = module.exports.CreateQrCodeRequest = function(args) {
  this.authSessionId = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
  }
};
CreateQrCodeRequest.prototype = {};
CreateQrCodeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQrCodeRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateQrCodeRequest');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreatePinCodeResponse = module.exports.CreatePinCodeResponse = function(args) {
  this.pinCode = null;
  if (args) {
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
  }
};
CreatePinCodeResponse.prototype = {};
CreatePinCodeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreatePinCodeResponse.prototype.write = function(output) {
  output.writeStructBegin('CreatePinCodeResponse');
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 1);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreatePinCodeRequest = module.exports.CreatePinCodeRequest = function(args) {
  this.authSessionId = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
  }
};
CreatePinCodeRequest.prototype = {};
CreatePinCodeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreatePinCodeRequest.prototype.write = function(output) {
  output.writeStructBegin('CreatePinCodeRequest');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VerifyCertificateResponse = module.exports.VerifyCertificateResponse = function(args) {
};
VerifyCertificateResponse.prototype = {};
VerifyCertificateResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerifyCertificateResponse.prototype.write = function(output) {
  output.writeStructBegin('VerifyCertificateResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VerifyCertificateRequest = module.exports.VerifyCertificateRequest = function(args) {
  this.authSessionId = null;
  this.certificate = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
VerifyCertificateRequest.prototype = {};
VerifyCertificateRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerifyCertificateRequest.prototype.write = function(output) {
  output.writeStructBegin('VerifyCertificateRequest');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 2);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QrCodeLoginResponse = module.exports.QrCodeLoginResponse = function(args) {
  this.certificate = null;
  this.accessToken = null;
  this.lastBindTimestamp = null;
  this.metaData = null;
  if (args) {
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    }
    if (args.lastBindTimestamp !== undefined && args.lastBindTimestamp !== null) {
      this.lastBindTimestamp = args.lastBindTimestamp;
    }
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
  }
};
QrCodeLoginResponse.prototype = {};
QrCodeLoginResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastBindTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.metaData = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = input.readString();
          this.metaData[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QrCodeLoginResponse.prototype.write = function(output) {
  output.writeStructBegin('QrCodeLoginResponse');
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 1);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.lastBindTimestamp !== null && this.lastBindTimestamp !== undefined) {
    output.writeFieldBegin('lastBindTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.lastBindTimestamp);
    output.writeFieldEnd();
  }
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter5 in this.metaData) {
      if (this.metaData.hasOwnProperty(kiter5)) {
        var viter6 = this.metaData[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QrCodeLoginRequest = module.exports.QrCodeLoginRequest = function(args) {
  this.authSessionId = null;
  this.systemName = null;
  this.autoLoginIsRequired = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.autoLoginIsRequired !== undefined && args.autoLoginIsRequired !== null) {
      this.autoLoginIsRequired = args.autoLoginIsRequired;
    }
  }
};
QrCodeLoginRequest.prototype = {};
QrCodeLoginRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.autoLoginIsRequired = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QrCodeLoginRequest.prototype.write = function(output) {
  output.writeStructBegin('QrCodeLoginRequest');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.autoLoginIsRequired !== null && this.autoLoginIsRequired !== undefined) {
    output.writeFieldBegin('autoLoginIsRequired', Thrift.Type.BOOL, 3);
    output.writeBool(this.autoLoginIsRequired);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

